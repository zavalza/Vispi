Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    PERIOD

Grammar

Rule 0     S' -> program
Rule 1     program -> programName f_loadVispiFunctions hardware moreVars moreAssign functions
Rule 2     f_loadVispiFunctions -> <empty>
Rule 3     programName -> PROGRAM ID NEWLINE
Rule 4     empty -> <empty>
Rule 5     hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
Rule 6     camDeclaration -> empty
Rule 7     camDeclaration -> CAM WEBCAM COLON ID NEWLINE
Rule 8     camDeclaration -> CAM PICAM COLON ID NEWLINE
Rule 9     inputsDeclaration -> empty
Rule 10    inputsDeclaration -> INPUT f_saveType pinList NEWLINE
Rule 11    outputsDeclaration -> empty
Rule 12    outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE
Rule 13    pwmDeclaration -> empty
Rule 14    pwmDeclaration -> PWM f_saveType pinList NEWLINE
Rule 15    pinList -> C_INT COLON ID
Rule 16    pinList -> C_INT COLON ID COMMA pinList
Rule 17    vars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars
Rule 18    moreVars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars
Rule 19    moreVars -> empty
Rule 20    f_saveType -> <empty>
Rule 21    idList -> ID
Rule 22    idList -> ID COMMA idList
Rule 23    tipo -> BOOL f_saveType
Rule 24    tipo -> INT f_saveType
Rule 25    tipo -> FLOAT f_saveType
Rule 26    tipo -> STRING f_saveType
Rule 27    tipo -> IMAGE f_saveType
Rule 28    functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 29    functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 30    functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 31    functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 32    functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 33    functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
Rule 34    functions -> empty
Rule 35    f_setVoid -> <empty>
Rule 36    f_endModule -> <empty>
Rule 37    f_saveModule -> <empty>
Rule 38    parameterList -> empty
Rule 39    parameterList -> COMMA tipo ID f_addToParam parameterList
Rule 40    f_addToParam -> <empty>
Rule 41    assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
Rule 42    moreAssign -> empty
Rule 43    moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
Rule 44    f_isAssign -> <empty>
Rule 45    f_generateEqual -> <empty>
Rule 46    f_checkID -> <empty>
Rule 47    moreStatements -> empty
Rule 48    moreStatements -> TAB f_addTab moreTabs statement moreStatements
Rule 49    block -> TAB f_addTab moreTabs statement moreStatements
Rule 50    moreTabs -> empty
Rule 51    moreTabs -> TAB f_addTab moreTabs
Rule 52    moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs
Rule 53    f_incTab -> <empty>
Rule 54    f_addTab -> <empty>
Rule 55    f_resetTab -> <empty>
Rule 56    f_checkTab -> <empty>
Rule 57    statement -> vars
Rule 58    statement -> assign
Rule 59    statement -> f_checkTab condition
Rule 60    statement -> f_checkTab doCycle
Rule 61    statement -> cycle
Rule 62    statement -> f_checkTab funct NEWLINE f_resetTab
Rule 63    statement -> f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab
Rule 64    statement -> empty
Rule 65    f_isReturn -> <empty>
Rule 66    f_return -> <empty>
Rule 67    cycle -> f_checkTab WHILE f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab
Rule 68    condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab
Rule 69    condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab
Rule 70    f_decTab -> <empty>
Rule 71    doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression f_endCondition NEWLINE f_resetTab
Rule 72    f_popIf -> <empty>
Rule 73    f_pushDo -> <empty>
Rule 74    f_isDoWhile -> <empty>
Rule 75    f_isCondition -> <empty>
Rule 76    f_endCondition -> <empty>
Rule 77    funct -> ID f_checkProc LPAREN RPAREN
Rule 78    funct -> ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN
Rule 79    f_functCall -> <empty>
Rule 80    f_checkProc -> <empty>
Rule 81    expressionList -> empty
Rule 82    expressionList -> COMMA expression f_genParam expressionList
Rule 83    f_genParam -> <empty>
Rule 84    expression -> orExp moreOrExp
Rule 85    orExp -> andExp moreAndExp
Rule 86    moreOrExp -> empty
Rule 87    moreOrExp -> OR f_pushOperator orExp f_popOrExp moreOrExp
Rule 88    f_popOrExp -> <empty>
Rule 89    andExp -> notExp
Rule 90    moreAndExp -> empty
Rule 91    moreAndExp -> AND f_pushOperator andExp f_popAndExp moreAndExp
Rule 92    f_popAndExp -> <empty>
Rule 93    notExp -> boolExp
Rule 94    notExp -> NOT f_pushOperator boolExp f_popNotExp
Rule 95    f_popNotExp -> <empty>
Rule 96    boolExp -> exp
Rule 97    boolExp -> exp compareToken exp f_popComparation
Rule 98    f_popComparation -> <empty>
Rule 99    compareToken -> GREATER_THAN
Rule 100   compareToken -> LESS_THAN
Rule 101   compareToken -> LESS_EQUAL_THAN
Rule 102   compareToken -> GREATER_EQUAL_THAN
Rule 103   compareToken -> NOT_EQUAL_THAN
Rule 104   compareToken -> SAME_AS
Rule 105   exp -> term moreTerms
Rule 106   moreTerms -> empty
Rule 107   moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms
Rule 108   moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms
Rule 109   f_popTerm -> <empty>
Rule 110   term -> factor moreFactors
Rule 111   moreFactors -> empty
Rule 112   moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors
Rule 113   moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors
Rule 114   moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors
Rule 115   factor -> LPAREN f_pushOperator expression RPAREN f_popOperator
Rule 116   factor -> cvar
Rule 117   factor -> funct
Rule 118   f_pushOperator -> <empty>
Rule 119   f_popOperator -> <empty>
Rule 120   f_popFactor -> <empty>
Rule 121   cvar -> ID f_isID
Rule 122   cvar -> C_BOOL f_isConst
Rule 123   cvar -> C_INT f_isConst
Rule 124   cvar -> C_FLOAT f_isConst
Rule 125   cvar -> C_STRING f_isConst
Rule 126   f_isID -> <empty>
Rule 127   f_isConst -> <empty>

Terminals, with rules where they appear

AND                  : 91
BOOL                 : 23
CAM                  : 7 8
COLON                : 7 8 15 16 28 29 30 31 32 33 67 68 69 69 71
COMMA                : 16 22 39 82
C_BOOL               : 122
C_FLOAT              : 124
C_INT                : 15 16 123
C_STRING             : 125
DEF                  : 28 29 30 31 32 33
DIVIDE               : 112
DO                   : 71
ELSE                 : 69
END                  : 67 68 69
EQUAL                : 41 43
FLOAT                : 25
GREATER_EQUAL_THAN   : 102
GREATER_THAN         : 99
ID                   : 3 7 8 15 16 21 22 28 29 29 30 31 31 33 39 41 43 77 78 121
IF                   : 68 69
IMAGE                : 27
INPUT                : 10
INT                  : 24
LESS_EQUAL_THAN      : 101
LESS_THAN            : 100
LOOP                 : 71
LPAREN               : 28 29 30 31 32 33 77 78 115
MAIN                 : 32 33
MINUS                : 108
MOD                  : 114
NEWLINE              : 3 7 8 10 12 14 17 18 28 29 30 31 32 33 41 43 52 62 63 67 67 68 68 69 69 69 71 71
NOT                  : 94
NOT_EQUAL_THAN       : 103
OR                   : 87
OUTPUT               : 12
PERIOD               : 
PICAM                : 8
PLUS                 : 107
PROGRAM              : 3
PWM                  : 14
RETURN               : 63
RPAREN               : 28 29 30 31 32 33 77 78 115
SAME_AS              : 104
STRING               : 26
TAB                  : 48 49 51 52
TIMES                : 113
VOID                 : 30 31 32 33
WEBCAM               : 7
WHILE                : 67
error                : 

Nonterminals, with rules where they appear

andExp               : 85 91
assign               : 58
block                : 28 29 30 31 32 33 67 68 69 69 71
boolExp              : 93 94
camDeclaration       : 5
compareToken         : 97
condition            : 59
cvar                 : 116
cycle                : 61
doCycle              : 60
empty                : 6 9 11 13 19 34 38 42 47 50 64 81 86 90 106 111
exp                  : 96 97 97
expression           : 41 43 63 67 68 69 71 78 82 115
expressionList       : 78 82
f_addTab             : 48 49 51 52
f_addToParam         : 29 31 33 39
f_checkID            : 41 43
f_checkProc          : 77 78
f_checkTab           : 17 18 41 43 59 60 62 63 67 69 71
f_decTab             : 
f_endCondition       : 67 68 69 71
f_endModule          : 28 29 30 31 32 33
f_functCall          : 78 78
f_genParam           : 78 82
f_generateEqual      : 41 43
f_incTab             : 28 29 30 31 32 33 67 68 69 69 71
f_isAssign           : 41 43
f_isCondition        : 67 68 69 71
f_isConst            : 122 123 124 125
f_isDoWhile          : 71
f_isID               : 121
f_isReturn           : 63
f_loadVispiFunctions : 1
f_popAndExp          : 91
f_popComparation     : 97
f_popFactor          : 112 113 114
f_popIf              : 69
f_popNotExp          : 94
f_popOperator        : 115
f_popOrExp           : 87
f_popTerm            : 107 108
f_pushDo             : 71
f_pushOperator       : 87 91 94 107 108 112 113 114 115
f_resetTab           : 17 18 28 29 30 31 32 33 41 43 52 62 63 67 67 68 68 69 69 69 71 71
f_return             : 63
f_saveModule         : 28 29 30 31 32 33
f_saveType           : 10 12 14 23 24 25 26 27
f_setVoid            : 30 31 32 33
factor               : 110 112 113 114
funct                : 62 117
functions            : 1 28 29 30 31 32 33
hardware             : 1
idList               : 17 18 22
inputsDeclaration    : 5
moreAndExp           : 85 91
moreAssign           : 1 41 43
moreFactors          : 110 112 113 114
moreOrExp            : 84 87
moreStatements       : 48 49
moreTabs             : 48 49 51 52
moreTerms            : 105 107 108
moreVars             : 1 17 18
notExp               : 89
orExp                : 84 87
outputsDeclaration   : 5
parameterList        : 29 31 33 39
pinList              : 10 12 14 16
program              : 0
programName          : 1
pwmDeclaration       : 5
statement            : 48 49
term                 : 105 107 108
tipo                 : 17 18 28 29 29 31 33 39
vars                 : 57

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . programName f_loadVispiFunctions hardware moreVars moreAssign functions
    (3) programName -> . PROGRAM ID NEWLINE

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    programName                    shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> programName . f_loadVispiFunctions hardware moreVars moreAssign functions
    (2) f_loadVispiFunctions -> .

    CAM             reduce using rule 2 (f_loadVispiFunctions -> .)
    DEF             reduce using rule 2 (f_loadVispiFunctions -> .)
    ID              reduce using rule 2 (f_loadVispiFunctions -> .)
    BOOL            reduce using rule 2 (f_loadVispiFunctions -> .)
    INT             reduce using rule 2 (f_loadVispiFunctions -> .)
    FLOAT           reduce using rule 2 (f_loadVispiFunctions -> .)
    STRING          reduce using rule 2 (f_loadVispiFunctions -> .)
    IMAGE           reduce using rule 2 (f_loadVispiFunctions -> .)
    INPUT           reduce using rule 2 (f_loadVispiFunctions -> .)
    OUTPUT          reduce using rule 2 (f_loadVispiFunctions -> .)
    PWM             reduce using rule 2 (f_loadVispiFunctions -> .)
    $end            reduce using rule 2 (f_loadVispiFunctions -> .)

    f_loadVispiFunctions           shift and go to state 4

state 3

    (3) programName -> PROGRAM . ID NEWLINE

    ID              shift and go to state 5


state 4

    (1) program -> programName f_loadVispiFunctions . hardware moreVars moreAssign functions
    (5) hardware -> . camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
    (6) camDeclaration -> . empty
    (7) camDeclaration -> . CAM WEBCAM COLON ID NEWLINE
    (8) camDeclaration -> . CAM PICAM COLON ID NEWLINE
    (4) empty -> .

    CAM             shift and go to state 6
    INPUT           reduce using rule 4 (empty -> .)
    OUTPUT          reduce using rule 4 (empty -> .)
    PWM             reduce using rule 4 (empty -> .)
    DEF             reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    BOOL            reduce using rule 4 (empty -> .)
    INT             reduce using rule 4 (empty -> .)
    FLOAT           reduce using rule 4 (empty -> .)
    STRING          reduce using rule 4 (empty -> .)
    IMAGE           reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)

    hardware                       shift and go to state 7
    camDeclaration                 shift and go to state 8
    empty                          shift and go to state 9

state 5

    (3) programName -> PROGRAM ID . NEWLINE

    NEWLINE         shift and go to state 10


state 6

    (7) camDeclaration -> CAM . WEBCAM COLON ID NEWLINE
    (8) camDeclaration -> CAM . PICAM COLON ID NEWLINE

    WEBCAM          shift and go to state 11
    PICAM           shift and go to state 12


state 7

    (1) program -> programName f_loadVispiFunctions hardware . moreVars moreAssign functions
    (18) moreVars -> . f_checkTab tipo idList NEWLINE f_resetTab moreVars
    (19) moreVars -> . empty
    (56) f_checkTab -> .
    (4) empty -> .

    BOOL            reduce using rule 56 (f_checkTab -> .)
    INT             reduce using rule 56 (f_checkTab -> .)
    FLOAT           reduce using rule 56 (f_checkTab -> .)
    STRING          reduce using rule 56 (f_checkTab -> .)
    IMAGE           reduce using rule 56 (f_checkTab -> .)
    DEF             reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)

    f_checkTab                     shift and go to state 13
    moreVars                       shift and go to state 14
    empty                          shift and go to state 15

state 8

    (5) hardware -> camDeclaration . inputsDeclaration outputsDeclaration pwmDeclaration
    (9) inputsDeclaration -> . empty
    (10) inputsDeclaration -> . INPUT f_saveType pinList NEWLINE
    (4) empty -> .

    INPUT           shift and go to state 17
    OUTPUT          reduce using rule 4 (empty -> .)
    PWM             reduce using rule 4 (empty -> .)
    DEF             reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    BOOL            reduce using rule 4 (empty -> .)
    INT             reduce using rule 4 (empty -> .)
    FLOAT           reduce using rule 4 (empty -> .)
    STRING          reduce using rule 4 (empty -> .)
    IMAGE           reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)

    inputsDeclaration              shift and go to state 16
    empty                          shift and go to state 18

state 9

    (6) camDeclaration -> empty .

    INPUT           reduce using rule 6 (camDeclaration -> empty .)
    OUTPUT          reduce using rule 6 (camDeclaration -> empty .)
    PWM             reduce using rule 6 (camDeclaration -> empty .)
    DEF             reduce using rule 6 (camDeclaration -> empty .)
    ID              reduce using rule 6 (camDeclaration -> empty .)
    BOOL            reduce using rule 6 (camDeclaration -> empty .)
    INT             reduce using rule 6 (camDeclaration -> empty .)
    FLOAT           reduce using rule 6 (camDeclaration -> empty .)
    STRING          reduce using rule 6 (camDeclaration -> empty .)
    IMAGE           reduce using rule 6 (camDeclaration -> empty .)
    $end            reduce using rule 6 (camDeclaration -> empty .)


state 10

    (3) programName -> PROGRAM ID NEWLINE .

    CAM             reduce using rule 3 (programName -> PROGRAM ID NEWLINE .)
    DEF             reduce using rule 3 (programName -> PROGRAM ID NEWLINE .)
    ID              reduce using rule 3 (programName -> PROGRAM ID NEWLINE .)
    BOOL            reduce using rule 3 (programName -> PROGRAM ID NEWLINE .)
    INT             reduce using rule 3 (programName -> PROGRAM ID NEWLINE .)
    FLOAT           reduce using rule 3 (programName -> PROGRAM ID NEWLINE .)
    STRING          reduce using rule 3 (programName -> PROGRAM ID NEWLINE .)
    IMAGE           reduce using rule 3 (programName -> PROGRAM ID NEWLINE .)
    INPUT           reduce using rule 3 (programName -> PROGRAM ID NEWLINE .)
    OUTPUT          reduce using rule 3 (programName -> PROGRAM ID NEWLINE .)
    PWM             reduce using rule 3 (programName -> PROGRAM ID NEWLINE .)
    $end            reduce using rule 3 (programName -> PROGRAM ID NEWLINE .)


state 11

    (7) camDeclaration -> CAM WEBCAM . COLON ID NEWLINE

    COLON           shift and go to state 19


state 12

    (8) camDeclaration -> CAM PICAM . COLON ID NEWLINE

    COLON           shift and go to state 20


state 13

    (18) moreVars -> f_checkTab . tipo idList NEWLINE f_resetTab moreVars
    (23) tipo -> . BOOL f_saveType
    (24) tipo -> . INT f_saveType
    (25) tipo -> . FLOAT f_saveType
    (26) tipo -> . STRING f_saveType
    (27) tipo -> . IMAGE f_saveType

    BOOL            shift and go to state 24
    INT             shift and go to state 23
    FLOAT           shift and go to state 21
    STRING          shift and go to state 26
    IMAGE           shift and go to state 25

    tipo                           shift and go to state 22

state 14

    (1) program -> programName f_loadVispiFunctions hardware moreVars . moreAssign functions
    (42) moreAssign -> . empty
    (43) moreAssign -> . f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (4) empty -> .
    (56) f_checkTab -> .

    DEF             reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    ID              reduce using rule 56 (f_checkTab -> .)

    f_checkTab                     shift and go to state 27
    moreAssign                     shift and go to state 28
    empty                          shift and go to state 29

state 15

    (19) moreVars -> empty .

    DEF             reduce using rule 19 (moreVars -> empty .)
    ID              reduce using rule 19 (moreVars -> empty .)
    $end            reduce using rule 19 (moreVars -> empty .)
    TAB             reduce using rule 19 (moreVars -> empty .)
    LOOP            reduce using rule 19 (moreVars -> empty .)
    END             reduce using rule 19 (moreVars -> empty .)
    ELSE            reduce using rule 19 (moreVars -> empty .)


state 16

    (5) hardware -> camDeclaration inputsDeclaration . outputsDeclaration pwmDeclaration
    (11) outputsDeclaration -> . empty
    (12) outputsDeclaration -> . OUTPUT f_saveType pinList NEWLINE
    (4) empty -> .

    OUTPUT          shift and go to state 31
    PWM             reduce using rule 4 (empty -> .)
    DEF             reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    BOOL            reduce using rule 4 (empty -> .)
    INT             reduce using rule 4 (empty -> .)
    FLOAT           reduce using rule 4 (empty -> .)
    STRING          reduce using rule 4 (empty -> .)
    IMAGE           reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)

    outputsDeclaration             shift and go to state 30
    empty                          shift and go to state 32

state 17

    (10) inputsDeclaration -> INPUT . f_saveType pinList NEWLINE
    (20) f_saveType -> .

    C_INT           reduce using rule 20 (f_saveType -> .)

    f_saveType                     shift and go to state 33

state 18

    (9) inputsDeclaration -> empty .

    OUTPUT          reduce using rule 9 (inputsDeclaration -> empty .)
    PWM             reduce using rule 9 (inputsDeclaration -> empty .)
    DEF             reduce using rule 9 (inputsDeclaration -> empty .)
    ID              reduce using rule 9 (inputsDeclaration -> empty .)
    BOOL            reduce using rule 9 (inputsDeclaration -> empty .)
    INT             reduce using rule 9 (inputsDeclaration -> empty .)
    FLOAT           reduce using rule 9 (inputsDeclaration -> empty .)
    STRING          reduce using rule 9 (inputsDeclaration -> empty .)
    IMAGE           reduce using rule 9 (inputsDeclaration -> empty .)
    $end            reduce using rule 9 (inputsDeclaration -> empty .)


state 19

    (7) camDeclaration -> CAM WEBCAM COLON . ID NEWLINE

    ID              shift and go to state 34


state 20

    (8) camDeclaration -> CAM PICAM COLON . ID NEWLINE

    ID              shift and go to state 35


state 21

    (25) tipo -> FLOAT . f_saveType
    (20) f_saveType -> .

    ID              reduce using rule 20 (f_saveType -> .)

    f_saveType                     shift and go to state 36

state 22

    (18) moreVars -> f_checkTab tipo . idList NEWLINE f_resetTab moreVars
    (21) idList -> . ID
    (22) idList -> . ID COMMA idList

    ID              shift and go to state 38

    idList                         shift and go to state 37

state 23

    (24) tipo -> INT . f_saveType
    (20) f_saveType -> .

    ID              reduce using rule 20 (f_saveType -> .)

    f_saveType                     shift and go to state 39

state 24

    (23) tipo -> BOOL . f_saveType
    (20) f_saveType -> .

    ID              reduce using rule 20 (f_saveType -> .)

    f_saveType                     shift and go to state 40

state 25

    (27) tipo -> IMAGE . f_saveType
    (20) f_saveType -> .

    ID              reduce using rule 20 (f_saveType -> .)

    f_saveType                     shift and go to state 41

state 26

    (26) tipo -> STRING . f_saveType
    (20) f_saveType -> .

    ID              reduce using rule 20 (f_saveType -> .)

    f_saveType                     shift and go to state 42

state 27

    (43) moreAssign -> f_checkTab . ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign

    ID              shift and go to state 43


state 28

    (1) program -> programName f_loadVispiFunctions hardware moreVars moreAssign . functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (34) functions -> . empty
    (4) empty -> .

    DEF             shift and go to state 44
    $end            reduce using rule 4 (empty -> .)

    functions                      shift and go to state 45
    empty                          shift and go to state 46

state 29

    (42) moreAssign -> empty .

    TAB             reduce using rule 42 (moreAssign -> empty .)
    DEF             reduce using rule 42 (moreAssign -> empty .)
    $end            reduce using rule 42 (moreAssign -> empty .)
    LOOP            reduce using rule 42 (moreAssign -> empty .)
    END             reduce using rule 42 (moreAssign -> empty .)
    ELSE            reduce using rule 42 (moreAssign -> empty .)


state 30

    (5) hardware -> camDeclaration inputsDeclaration outputsDeclaration . pwmDeclaration
    (13) pwmDeclaration -> . empty
    (14) pwmDeclaration -> . PWM f_saveType pinList NEWLINE
    (4) empty -> .

    PWM             shift and go to state 48
    DEF             reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    BOOL            reduce using rule 4 (empty -> .)
    INT             reduce using rule 4 (empty -> .)
    FLOAT           reduce using rule 4 (empty -> .)
    STRING          reduce using rule 4 (empty -> .)
    IMAGE           reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)

    pwmDeclaration                 shift and go to state 47
    empty                          shift and go to state 49

state 31

    (12) outputsDeclaration -> OUTPUT . f_saveType pinList NEWLINE
    (20) f_saveType -> .

    C_INT           reduce using rule 20 (f_saveType -> .)

    f_saveType                     shift and go to state 50

state 32

    (11) outputsDeclaration -> empty .

    PWM             reduce using rule 11 (outputsDeclaration -> empty .)
    DEF             reduce using rule 11 (outputsDeclaration -> empty .)
    ID              reduce using rule 11 (outputsDeclaration -> empty .)
    BOOL            reduce using rule 11 (outputsDeclaration -> empty .)
    INT             reduce using rule 11 (outputsDeclaration -> empty .)
    FLOAT           reduce using rule 11 (outputsDeclaration -> empty .)
    STRING          reduce using rule 11 (outputsDeclaration -> empty .)
    IMAGE           reduce using rule 11 (outputsDeclaration -> empty .)
    $end            reduce using rule 11 (outputsDeclaration -> empty .)


state 33

    (10) inputsDeclaration -> INPUT f_saveType . pinList NEWLINE
    (15) pinList -> . C_INT COLON ID
    (16) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 52

    pinList                        shift and go to state 51

state 34

    (7) camDeclaration -> CAM WEBCAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 53


state 35

    (8) camDeclaration -> CAM PICAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 54


state 36

    (25) tipo -> FLOAT f_saveType .

    ID              reduce using rule 25 (tipo -> FLOAT f_saveType .)


state 37

    (18) moreVars -> f_checkTab tipo idList . NEWLINE f_resetTab moreVars

    NEWLINE         shift and go to state 55


state 38

    (21) idList -> ID .
    (22) idList -> ID . COMMA idList

    NEWLINE         reduce using rule 21 (idList -> ID .)
    COMMA           shift and go to state 56


state 39

    (24) tipo -> INT f_saveType .

    ID              reduce using rule 24 (tipo -> INT f_saveType .)


state 40

    (23) tipo -> BOOL f_saveType .

    ID              reduce using rule 23 (tipo -> BOOL f_saveType .)


state 41

    (27) tipo -> IMAGE f_saveType .

    ID              reduce using rule 27 (tipo -> IMAGE f_saveType .)


state 42

    (26) tipo -> STRING f_saveType .

    ID              reduce using rule 26 (tipo -> STRING f_saveType .)


state 43

    (43) moreAssign -> f_checkTab ID . f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (46) f_checkID -> .

    EQUAL           reduce using rule 46 (f_checkID -> .)

    f_checkID                      shift and go to state 57

state 44

    (28) functions -> DEF . tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> DEF . tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> DEF . VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF . VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> DEF . VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> DEF . VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (23) tipo -> . BOOL f_saveType
    (24) tipo -> . INT f_saveType
    (25) tipo -> . FLOAT f_saveType
    (26) tipo -> . STRING f_saveType
    (27) tipo -> . IMAGE f_saveType

    VOID            shift and go to state 58
    BOOL            shift and go to state 24
    INT             shift and go to state 23
    FLOAT           shift and go to state 21
    STRING          shift and go to state 26
    IMAGE           shift and go to state 25

    tipo                           shift and go to state 59

state 45

    (1) program -> programName f_loadVispiFunctions hardware moreVars moreAssign functions .

    $end            reduce using rule 1 (program -> programName f_loadVispiFunctions hardware moreVars moreAssign functions .)


state 46

    (34) functions -> empty .

    $end            reduce using rule 34 (functions -> empty .)


state 47

    (5) hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .

    DEF             reduce using rule 5 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    ID              reduce using rule 5 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    BOOL            reduce using rule 5 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    INT             reduce using rule 5 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    FLOAT           reduce using rule 5 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    STRING          reduce using rule 5 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    IMAGE           reduce using rule 5 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    $end            reduce using rule 5 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)


state 48

    (14) pwmDeclaration -> PWM . f_saveType pinList NEWLINE
    (20) f_saveType -> .

    C_INT           reduce using rule 20 (f_saveType -> .)

    f_saveType                     shift and go to state 60

state 49

    (13) pwmDeclaration -> empty .

    DEF             reduce using rule 13 (pwmDeclaration -> empty .)
    ID              reduce using rule 13 (pwmDeclaration -> empty .)
    BOOL            reduce using rule 13 (pwmDeclaration -> empty .)
    INT             reduce using rule 13 (pwmDeclaration -> empty .)
    FLOAT           reduce using rule 13 (pwmDeclaration -> empty .)
    STRING          reduce using rule 13 (pwmDeclaration -> empty .)
    IMAGE           reduce using rule 13 (pwmDeclaration -> empty .)
    $end            reduce using rule 13 (pwmDeclaration -> empty .)


state 50

    (12) outputsDeclaration -> OUTPUT f_saveType . pinList NEWLINE
    (15) pinList -> . C_INT COLON ID
    (16) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 52

    pinList                        shift and go to state 61

state 51

    (10) inputsDeclaration -> INPUT f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 62


state 52

    (15) pinList -> C_INT . COLON ID
    (16) pinList -> C_INT . COLON ID COMMA pinList

    COLON           shift and go to state 63


state 53

    (7) camDeclaration -> CAM WEBCAM COLON ID NEWLINE .

    INPUT           reduce using rule 7 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 7 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    PWM             reduce using rule 7 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    DEF             reduce using rule 7 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    ID              reduce using rule 7 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    BOOL            reduce using rule 7 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    INT             reduce using rule 7 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 7 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    STRING          reduce using rule 7 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 7 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    $end            reduce using rule 7 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)


state 54

    (8) camDeclaration -> CAM PICAM COLON ID NEWLINE .

    INPUT           reduce using rule 8 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 8 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    PWM             reduce using rule 8 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    DEF             reduce using rule 8 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    ID              reduce using rule 8 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    BOOL            reduce using rule 8 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    INT             reduce using rule 8 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 8 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    STRING          reduce using rule 8 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 8 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    $end            reduce using rule 8 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)


state 55

    (18) moreVars -> f_checkTab tipo idList NEWLINE . f_resetTab moreVars
    (55) f_resetTab -> .

    BOOL            reduce using rule 55 (f_resetTab -> .)
    INT             reduce using rule 55 (f_resetTab -> .)
    FLOAT           reduce using rule 55 (f_resetTab -> .)
    STRING          reduce using rule 55 (f_resetTab -> .)
    IMAGE           reduce using rule 55 (f_resetTab -> .)
    DEF             reduce using rule 55 (f_resetTab -> .)
    ID              reduce using rule 55 (f_resetTab -> .)
    $end            reduce using rule 55 (f_resetTab -> .)
    TAB             reduce using rule 55 (f_resetTab -> .)
    LOOP            reduce using rule 55 (f_resetTab -> .)
    END             reduce using rule 55 (f_resetTab -> .)
    ELSE            reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 64

state 56

    (22) idList -> ID COMMA . idList
    (21) idList -> . ID
    (22) idList -> . ID COMMA idList

    ID              shift and go to state 38

    idList                         shift and go to state 65

state 57

    (43) moreAssign -> f_checkTab ID f_checkID . EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign

    EQUAL           shift and go to state 66


state 58

    (30) functions -> DEF VOID . f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF VOID . f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> DEF VOID . f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> DEF VOID . f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (35) f_setVoid -> .

    ID              reduce using rule 35 (f_setVoid -> .)
    MAIN            reduce using rule 35 (f_setVoid -> .)

    f_setVoid                      shift and go to state 67

state 59

    (28) functions -> DEF tipo . ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> DEF tipo . ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    ID              shift and go to state 68


state 60

    (14) pwmDeclaration -> PWM f_saveType . pinList NEWLINE
    (15) pinList -> . C_INT COLON ID
    (16) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 52

    pinList                        shift and go to state 69

state 61

    (12) outputsDeclaration -> OUTPUT f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 70


state 62

    (10) inputsDeclaration -> INPUT f_saveType pinList NEWLINE .

    OUTPUT          reduce using rule 10 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    PWM             reduce using rule 10 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    DEF             reduce using rule 10 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    ID              reduce using rule 10 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    BOOL            reduce using rule 10 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    INT             reduce using rule 10 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 10 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    STRING          reduce using rule 10 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 10 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    $end            reduce using rule 10 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)


state 63

    (15) pinList -> C_INT COLON . ID
    (16) pinList -> C_INT COLON . ID COMMA pinList

    ID              shift and go to state 71


state 64

    (18) moreVars -> f_checkTab tipo idList NEWLINE f_resetTab . moreVars
    (18) moreVars -> . f_checkTab tipo idList NEWLINE f_resetTab moreVars
    (19) moreVars -> . empty
    (56) f_checkTab -> .
    (4) empty -> .

    BOOL            reduce using rule 56 (f_checkTab -> .)
    INT             reduce using rule 56 (f_checkTab -> .)
    FLOAT           reduce using rule 56 (f_checkTab -> .)
    STRING          reduce using rule 56 (f_checkTab -> .)
    IMAGE           reduce using rule 56 (f_checkTab -> .)
    DEF             reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    TAB             reduce using rule 4 (empty -> .)
    LOOP            reduce using rule 4 (empty -> .)
    END             reduce using rule 4 (empty -> .)
    ELSE            reduce using rule 4 (empty -> .)

    f_checkTab                     shift and go to state 13
    moreVars                       shift and go to state 72
    empty                          shift and go to state 15

state 65

    (22) idList -> ID COMMA idList .

    NEWLINE         reduce using rule 22 (idList -> ID COMMA idList .)


state 66

    (43) moreAssign -> f_checkTab ID f_checkID EQUAL . f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (44) f_isAssign -> .

    NOT             reduce using rule 44 (f_isAssign -> .)
    LPAREN          reduce using rule 44 (f_isAssign -> .)
    ID              reduce using rule 44 (f_isAssign -> .)
    C_BOOL          reduce using rule 44 (f_isAssign -> .)
    C_INT           reduce using rule 44 (f_isAssign -> .)
    C_FLOAT         reduce using rule 44 (f_isAssign -> .)
    C_STRING        reduce using rule 44 (f_isAssign -> .)

    f_isAssign                     shift and go to state 73

state 67

    (30) functions -> DEF VOID f_setVoid . ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF VOID f_setVoid . ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> DEF VOID f_setVoid . MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> DEF VOID f_setVoid . MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    ID              shift and go to state 75
    MAIN            shift and go to state 74


state 68

    (28) functions -> DEF tipo ID . f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> DEF tipo ID . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (37) f_saveModule -> .

    LPAREN          reduce using rule 37 (f_saveModule -> .)

    f_saveModule                   shift and go to state 76

state 69

    (14) pwmDeclaration -> PWM f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 77


state 70

    (12) outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .

    PWM             reduce using rule 12 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    DEF             reduce using rule 12 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    ID              reduce using rule 12 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    BOOL            reduce using rule 12 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    INT             reduce using rule 12 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 12 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    STRING          reduce using rule 12 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 12 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    $end            reduce using rule 12 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)


state 71

    (15) pinList -> C_INT COLON ID .
    (16) pinList -> C_INT COLON ID . COMMA pinList

    NEWLINE         reduce using rule 15 (pinList -> C_INT COLON ID .)
    COMMA           shift and go to state 78


state 72

    (18) moreVars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .

    DEF             reduce using rule 18 (moreVars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    ID              reduce using rule 18 (moreVars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    $end            reduce using rule 18 (moreVars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    TAB             reduce using rule 18 (moreVars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    LOOP            reduce using rule 18 (moreVars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    END             reduce using rule 18 (moreVars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    ELSE            reduce using rule 18 (moreVars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)


state 73

    (43) moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign . expression NEWLINE f_resetTab f_generateEqual moreAssign
    (84) expression -> . orExp moreOrExp
    (85) orExp -> . andExp moreAndExp
    (89) andExp -> . notExp
    (93) notExp -> . boolExp
    (94) notExp -> . NOT f_pushOperator boolExp f_popNotExp
    (96) boolExp -> . exp
    (97) boolExp -> . exp compareToken exp f_popComparation
    (105) exp -> . term moreTerms
    (110) term -> . factor moreFactors
    (115) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (116) factor -> . cvar
    (117) factor -> . funct
    (121) cvar -> . ID f_isID
    (122) cvar -> . C_BOOL f_isConst
    (123) cvar -> . C_INT f_isConst
    (124) cvar -> . C_FLOAT f_isConst
    (125) cvar -> . C_STRING f_isConst
    (77) funct -> . ID f_checkProc LPAREN RPAREN
    (78) funct -> . ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN

    NOT             shift and go to state 94
    LPAREN          shift and go to state 88
    ID              shift and go to state 90
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 89
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 91

    cvar                           shift and go to state 79
    funct                          shift and go to state 82
    factor                         shift and go to state 84
    notExp                         shift and go to state 85
    orExp                          shift and go to state 86
    andExp                         shift and go to state 80
    term                           shift and go to state 87
    boolExp                        shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 95

state 74

    (32) functions -> DEF VOID f_setVoid MAIN . f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> DEF VOID f_setVoid MAIN . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (37) f_saveModule -> .

    LPAREN          reduce using rule 37 (f_saveModule -> .)

    f_saveModule                   shift and go to state 96

state 75

    (30) functions -> DEF VOID f_setVoid ID . f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF VOID f_setVoid ID . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (37) f_saveModule -> .

    LPAREN          reduce using rule 37 (f_saveModule -> .)

    f_saveModule                   shift and go to state 97

state 76

    (28) functions -> DEF tipo ID f_saveModule . LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> DEF tipo ID f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    LPAREN          shift and go to state 98


state 77

    (14) pwmDeclaration -> PWM f_saveType pinList NEWLINE .

    DEF             reduce using rule 14 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    ID              reduce using rule 14 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    BOOL            reduce using rule 14 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    INT             reduce using rule 14 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 14 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    STRING          reduce using rule 14 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 14 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    $end            reduce using rule 14 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)


state 78

    (16) pinList -> C_INT COLON ID COMMA . pinList
    (15) pinList -> . C_INT COLON ID
    (16) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 52

    pinList                        shift and go to state 99

state 79

    (116) factor -> cvar .

    DIVIDE          reduce using rule 116 (factor -> cvar .)
    TIMES           reduce using rule 116 (factor -> cvar .)
    MOD             reduce using rule 116 (factor -> cvar .)
    PLUS            reduce using rule 116 (factor -> cvar .)
    MINUS           reduce using rule 116 (factor -> cvar .)
    GREATER_THAN    reduce using rule 116 (factor -> cvar .)
    LESS_THAN       reduce using rule 116 (factor -> cvar .)
    LESS_EQUAL_THAN reduce using rule 116 (factor -> cvar .)
    GREATER_EQUAL_THAN reduce using rule 116 (factor -> cvar .)
    NOT_EQUAL_THAN  reduce using rule 116 (factor -> cvar .)
    SAME_AS         reduce using rule 116 (factor -> cvar .)
    AND             reduce using rule 116 (factor -> cvar .)
    OR              reduce using rule 116 (factor -> cvar .)
    COLON           reduce using rule 116 (factor -> cvar .)
    NEWLINE         reduce using rule 116 (factor -> cvar .)
    RPAREN          reduce using rule 116 (factor -> cvar .)
    COMMA           reduce using rule 116 (factor -> cvar .)


state 80

    (85) orExp -> andExp . moreAndExp
    (90) moreAndExp -> . empty
    (91) moreAndExp -> . AND f_pushOperator andExp f_popAndExp moreAndExp
    (4) empty -> .

    AND             shift and go to state 100
    OR              reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    COLON           reduce using rule 4 (empty -> .)

    moreAndExp                     shift and go to state 101
    empty                          shift and go to state 102

state 81

    (124) cvar -> C_FLOAT . f_isConst
    (127) f_isConst -> .

    DIVIDE          reduce using rule 127 (f_isConst -> .)
    TIMES           reduce using rule 127 (f_isConst -> .)
    MOD             reduce using rule 127 (f_isConst -> .)
    PLUS            reduce using rule 127 (f_isConst -> .)
    MINUS           reduce using rule 127 (f_isConst -> .)
    GREATER_THAN    reduce using rule 127 (f_isConst -> .)
    LESS_THAN       reduce using rule 127 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 127 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 127 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 127 (f_isConst -> .)
    SAME_AS         reduce using rule 127 (f_isConst -> .)
    AND             reduce using rule 127 (f_isConst -> .)
    OR              reduce using rule 127 (f_isConst -> .)
    NEWLINE         reduce using rule 127 (f_isConst -> .)
    RPAREN          reduce using rule 127 (f_isConst -> .)
    COMMA           reduce using rule 127 (f_isConst -> .)
    COLON           reduce using rule 127 (f_isConst -> .)

    f_isConst                      shift and go to state 103

state 82

    (117) factor -> funct .

    DIVIDE          reduce using rule 117 (factor -> funct .)
    TIMES           reduce using rule 117 (factor -> funct .)
    MOD             reduce using rule 117 (factor -> funct .)
    PLUS            reduce using rule 117 (factor -> funct .)
    MINUS           reduce using rule 117 (factor -> funct .)
    GREATER_THAN    reduce using rule 117 (factor -> funct .)
    LESS_THAN       reduce using rule 117 (factor -> funct .)
    LESS_EQUAL_THAN reduce using rule 117 (factor -> funct .)
    GREATER_EQUAL_THAN reduce using rule 117 (factor -> funct .)
    NOT_EQUAL_THAN  reduce using rule 117 (factor -> funct .)
    SAME_AS         reduce using rule 117 (factor -> funct .)
    AND             reduce using rule 117 (factor -> funct .)
    OR              reduce using rule 117 (factor -> funct .)
    COLON           reduce using rule 117 (factor -> funct .)
    NEWLINE         reduce using rule 117 (factor -> funct .)
    RPAREN          reduce using rule 117 (factor -> funct .)
    COMMA           reduce using rule 117 (factor -> funct .)


state 83

    (122) cvar -> C_BOOL . f_isConst
    (127) f_isConst -> .

    DIVIDE          reduce using rule 127 (f_isConst -> .)
    TIMES           reduce using rule 127 (f_isConst -> .)
    MOD             reduce using rule 127 (f_isConst -> .)
    PLUS            reduce using rule 127 (f_isConst -> .)
    MINUS           reduce using rule 127 (f_isConst -> .)
    GREATER_THAN    reduce using rule 127 (f_isConst -> .)
    LESS_THAN       reduce using rule 127 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 127 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 127 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 127 (f_isConst -> .)
    SAME_AS         reduce using rule 127 (f_isConst -> .)
    AND             reduce using rule 127 (f_isConst -> .)
    OR              reduce using rule 127 (f_isConst -> .)
    NEWLINE         reduce using rule 127 (f_isConst -> .)
    RPAREN          reduce using rule 127 (f_isConst -> .)
    COMMA           reduce using rule 127 (f_isConst -> .)
    COLON           reduce using rule 127 (f_isConst -> .)

    f_isConst                      shift and go to state 104

state 84

    (110) term -> factor . moreFactors
    (111) moreFactors -> . empty
    (112) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (113) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (114) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (4) empty -> .

    DIVIDE          shift and go to state 106
    TIMES           shift and go to state 107
    MOD             shift and go to state 109
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GREATER_THAN    reduce using rule 4 (empty -> .)
    LESS_THAN       reduce using rule 4 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 4 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 4 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 4 (empty -> .)
    SAME_AS         reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    COLON           reduce using rule 4 (empty -> .)

    moreFactors                    shift and go to state 105
    empty                          shift and go to state 108

state 85

    (89) andExp -> notExp .

    AND             reduce using rule 89 (andExp -> notExp .)
    OR              reduce using rule 89 (andExp -> notExp .)
    COLON           reduce using rule 89 (andExp -> notExp .)
    NEWLINE         reduce using rule 89 (andExp -> notExp .)
    COMMA           reduce using rule 89 (andExp -> notExp .)
    RPAREN          reduce using rule 89 (andExp -> notExp .)


state 86

    (84) expression -> orExp . moreOrExp
    (86) moreOrExp -> . empty
    (87) moreOrExp -> . OR f_pushOperator orExp f_popOrExp moreOrExp
    (4) empty -> .

    OR              shift and go to state 111
    NEWLINE         reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    COLON           reduce using rule 4 (empty -> .)

    moreOrExp                      shift and go to state 110
    empty                          shift and go to state 112

state 87

    (105) exp -> term . moreTerms
    (106) moreTerms -> . empty
    (107) moreTerms -> . PLUS f_pushOperator term f_popTerm moreTerms
    (108) moreTerms -> . MINUS f_pushOperator term f_popTerm moreTerms
    (4) empty -> .

    PLUS            shift and go to state 114
    MINUS           shift and go to state 115
    GREATER_THAN    reduce using rule 4 (empty -> .)
    LESS_THAN       reduce using rule 4 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 4 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 4 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 4 (empty -> .)
    SAME_AS         reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    COLON           reduce using rule 4 (empty -> .)

    moreTerms                      shift and go to state 113
    empty                          shift and go to state 116

state 88

    (115) factor -> LPAREN . f_pushOperator expression RPAREN f_popOperator
    (118) f_pushOperator -> .

    NOT             reduce using rule 118 (f_pushOperator -> .)
    LPAREN          reduce using rule 118 (f_pushOperator -> .)
    ID              reduce using rule 118 (f_pushOperator -> .)
    C_BOOL          reduce using rule 118 (f_pushOperator -> .)
    C_INT           reduce using rule 118 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 118 (f_pushOperator -> .)
    C_STRING        reduce using rule 118 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 117

state 89

    (123) cvar -> C_INT . f_isConst
    (127) f_isConst -> .

    DIVIDE          reduce using rule 127 (f_isConst -> .)
    TIMES           reduce using rule 127 (f_isConst -> .)
    MOD             reduce using rule 127 (f_isConst -> .)
    PLUS            reduce using rule 127 (f_isConst -> .)
    MINUS           reduce using rule 127 (f_isConst -> .)
    GREATER_THAN    reduce using rule 127 (f_isConst -> .)
    LESS_THAN       reduce using rule 127 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 127 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 127 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 127 (f_isConst -> .)
    SAME_AS         reduce using rule 127 (f_isConst -> .)
    AND             reduce using rule 127 (f_isConst -> .)
    OR              reduce using rule 127 (f_isConst -> .)
    NEWLINE         reduce using rule 127 (f_isConst -> .)
    RPAREN          reduce using rule 127 (f_isConst -> .)
    COMMA           reduce using rule 127 (f_isConst -> .)
    COLON           reduce using rule 127 (f_isConst -> .)

    f_isConst                      shift and go to state 118

state 90

    (121) cvar -> ID . f_isID
    (77) funct -> ID . f_checkProc LPAREN RPAREN
    (78) funct -> ID . f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN
    (126) f_isID -> .
    (80) f_checkProc -> .

    DIVIDE          reduce using rule 126 (f_isID -> .)
    TIMES           reduce using rule 126 (f_isID -> .)
    MOD             reduce using rule 126 (f_isID -> .)
    PLUS            reduce using rule 126 (f_isID -> .)
    MINUS           reduce using rule 126 (f_isID -> .)
    GREATER_THAN    reduce using rule 126 (f_isID -> .)
    LESS_THAN       reduce using rule 126 (f_isID -> .)
    LESS_EQUAL_THAN reduce using rule 126 (f_isID -> .)
    GREATER_EQUAL_THAN reduce using rule 126 (f_isID -> .)
    NOT_EQUAL_THAN  reduce using rule 126 (f_isID -> .)
    SAME_AS         reduce using rule 126 (f_isID -> .)
    AND             reduce using rule 126 (f_isID -> .)
    OR              reduce using rule 126 (f_isID -> .)
    NEWLINE         reduce using rule 126 (f_isID -> .)
    RPAREN          reduce using rule 126 (f_isID -> .)
    COMMA           reduce using rule 126 (f_isID -> .)
    COLON           reduce using rule 126 (f_isID -> .)
    LPAREN          reduce using rule 80 (f_checkProc -> .)

    f_checkProc                    shift and go to state 119
    f_isID                         shift and go to state 120

state 91

    (125) cvar -> C_STRING . f_isConst
    (127) f_isConst -> .

    DIVIDE          reduce using rule 127 (f_isConst -> .)
    TIMES           reduce using rule 127 (f_isConst -> .)
    MOD             reduce using rule 127 (f_isConst -> .)
    PLUS            reduce using rule 127 (f_isConst -> .)
    MINUS           reduce using rule 127 (f_isConst -> .)
    GREATER_THAN    reduce using rule 127 (f_isConst -> .)
    LESS_THAN       reduce using rule 127 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 127 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 127 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 127 (f_isConst -> .)
    SAME_AS         reduce using rule 127 (f_isConst -> .)
    AND             reduce using rule 127 (f_isConst -> .)
    OR              reduce using rule 127 (f_isConst -> .)
    NEWLINE         reduce using rule 127 (f_isConst -> .)
    RPAREN          reduce using rule 127 (f_isConst -> .)
    COMMA           reduce using rule 127 (f_isConst -> .)
    COLON           reduce using rule 127 (f_isConst -> .)

    f_isConst                      shift and go to state 121

state 92

    (93) notExp -> boolExp .

    AND             reduce using rule 93 (notExp -> boolExp .)
    OR              reduce using rule 93 (notExp -> boolExp .)
    COLON           reduce using rule 93 (notExp -> boolExp .)
    NEWLINE         reduce using rule 93 (notExp -> boolExp .)
    COMMA           reduce using rule 93 (notExp -> boolExp .)
    RPAREN          reduce using rule 93 (notExp -> boolExp .)


state 93

    (96) boolExp -> exp .
    (97) boolExp -> exp . compareToken exp f_popComparation
    (99) compareToken -> . GREATER_THAN
    (100) compareToken -> . LESS_THAN
    (101) compareToken -> . LESS_EQUAL_THAN
    (102) compareToken -> . GREATER_EQUAL_THAN
    (103) compareToken -> . NOT_EQUAL_THAN
    (104) compareToken -> . SAME_AS

    AND             reduce using rule 96 (boolExp -> exp .)
    OR              reduce using rule 96 (boolExp -> exp .)
    NEWLINE         reduce using rule 96 (boolExp -> exp .)
    RPAREN          reduce using rule 96 (boolExp -> exp .)
    COMMA           reduce using rule 96 (boolExp -> exp .)
    COLON           reduce using rule 96 (boolExp -> exp .)
    GREATER_THAN    shift and go to state 127
    LESS_THAN       shift and go to state 128
    LESS_EQUAL_THAN shift and go to state 124
    GREATER_EQUAL_THAN shift and go to state 123
    NOT_EQUAL_THAN  shift and go to state 126
    SAME_AS         shift and go to state 125

    compareToken                   shift and go to state 122

state 94

    (94) notExp -> NOT . f_pushOperator boolExp f_popNotExp
    (118) f_pushOperator -> .

    LPAREN          reduce using rule 118 (f_pushOperator -> .)
    ID              reduce using rule 118 (f_pushOperator -> .)
    C_BOOL          reduce using rule 118 (f_pushOperator -> .)
    C_INT           reduce using rule 118 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 118 (f_pushOperator -> .)
    C_STRING        reduce using rule 118 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 129

state 95

    (43) moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression . NEWLINE f_resetTab f_generateEqual moreAssign

    NEWLINE         shift and go to state 130


state 96

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule . LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    LPAREN          shift and go to state 131


state 97

    (30) functions -> DEF VOID f_setVoid ID f_saveModule . LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF VOID f_setVoid ID f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    LPAREN          shift and go to state 132


state 98

    (28) functions -> DEF tipo ID f_saveModule LPAREN . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> DEF tipo ID f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (23) tipo -> . BOOL f_saveType
    (24) tipo -> . INT f_saveType
    (25) tipo -> . FLOAT f_saveType
    (26) tipo -> . STRING f_saveType
    (27) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 133
    BOOL            shift and go to state 24
    INT             shift and go to state 23
    FLOAT           shift and go to state 21
    STRING          shift and go to state 26
    IMAGE           shift and go to state 25

    tipo                           shift and go to state 134

state 99

    (16) pinList -> C_INT COLON ID COMMA pinList .

    NEWLINE         reduce using rule 16 (pinList -> C_INT COLON ID COMMA pinList .)


state 100

    (91) moreAndExp -> AND . f_pushOperator andExp f_popAndExp moreAndExp
    (118) f_pushOperator -> .

    NOT             reduce using rule 118 (f_pushOperator -> .)
    LPAREN          reduce using rule 118 (f_pushOperator -> .)
    ID              reduce using rule 118 (f_pushOperator -> .)
    C_BOOL          reduce using rule 118 (f_pushOperator -> .)
    C_INT           reduce using rule 118 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 118 (f_pushOperator -> .)
    C_STRING        reduce using rule 118 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 135

state 101

    (85) orExp -> andExp moreAndExp .

    OR              reduce using rule 85 (orExp -> andExp moreAndExp .)
    RPAREN          reduce using rule 85 (orExp -> andExp moreAndExp .)
    COMMA           reduce using rule 85 (orExp -> andExp moreAndExp .)
    COLON           reduce using rule 85 (orExp -> andExp moreAndExp .)
    NEWLINE         reduce using rule 85 (orExp -> andExp moreAndExp .)


state 102

    (90) moreAndExp -> empty .

    OR              reduce using rule 90 (moreAndExp -> empty .)
    NEWLINE         reduce using rule 90 (moreAndExp -> empty .)
    RPAREN          reduce using rule 90 (moreAndExp -> empty .)
    COMMA           reduce using rule 90 (moreAndExp -> empty .)
    COLON           reduce using rule 90 (moreAndExp -> empty .)


state 103

    (124) cvar -> C_FLOAT f_isConst .

    DIVIDE          reduce using rule 124 (cvar -> C_FLOAT f_isConst .)
    TIMES           reduce using rule 124 (cvar -> C_FLOAT f_isConst .)
    MOD             reduce using rule 124 (cvar -> C_FLOAT f_isConst .)
    PLUS            reduce using rule 124 (cvar -> C_FLOAT f_isConst .)
    MINUS           reduce using rule 124 (cvar -> C_FLOAT f_isConst .)
    GREATER_THAN    reduce using rule 124 (cvar -> C_FLOAT f_isConst .)
    LESS_THAN       reduce using rule 124 (cvar -> C_FLOAT f_isConst .)
    LESS_EQUAL_THAN reduce using rule 124 (cvar -> C_FLOAT f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 124 (cvar -> C_FLOAT f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 124 (cvar -> C_FLOAT f_isConst .)
    SAME_AS         reduce using rule 124 (cvar -> C_FLOAT f_isConst .)
    AND             reduce using rule 124 (cvar -> C_FLOAT f_isConst .)
    OR              reduce using rule 124 (cvar -> C_FLOAT f_isConst .)
    NEWLINE         reduce using rule 124 (cvar -> C_FLOAT f_isConst .)
    RPAREN          reduce using rule 124 (cvar -> C_FLOAT f_isConst .)
    COMMA           reduce using rule 124 (cvar -> C_FLOAT f_isConst .)
    COLON           reduce using rule 124 (cvar -> C_FLOAT f_isConst .)


state 104

    (122) cvar -> C_BOOL f_isConst .

    DIVIDE          reduce using rule 122 (cvar -> C_BOOL f_isConst .)
    TIMES           reduce using rule 122 (cvar -> C_BOOL f_isConst .)
    MOD             reduce using rule 122 (cvar -> C_BOOL f_isConst .)
    PLUS            reduce using rule 122 (cvar -> C_BOOL f_isConst .)
    MINUS           reduce using rule 122 (cvar -> C_BOOL f_isConst .)
    GREATER_THAN    reduce using rule 122 (cvar -> C_BOOL f_isConst .)
    LESS_THAN       reduce using rule 122 (cvar -> C_BOOL f_isConst .)
    LESS_EQUAL_THAN reduce using rule 122 (cvar -> C_BOOL f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 122 (cvar -> C_BOOL f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 122 (cvar -> C_BOOL f_isConst .)
    SAME_AS         reduce using rule 122 (cvar -> C_BOOL f_isConst .)
    AND             reduce using rule 122 (cvar -> C_BOOL f_isConst .)
    OR              reduce using rule 122 (cvar -> C_BOOL f_isConst .)
    NEWLINE         reduce using rule 122 (cvar -> C_BOOL f_isConst .)
    RPAREN          reduce using rule 122 (cvar -> C_BOOL f_isConst .)
    COMMA           reduce using rule 122 (cvar -> C_BOOL f_isConst .)
    COLON           reduce using rule 122 (cvar -> C_BOOL f_isConst .)


state 105

    (110) term -> factor moreFactors .

    PLUS            reduce using rule 110 (term -> factor moreFactors .)
    MINUS           reduce using rule 110 (term -> factor moreFactors .)
    GREATER_THAN    reduce using rule 110 (term -> factor moreFactors .)
    LESS_THAN       reduce using rule 110 (term -> factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 110 (term -> factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 110 (term -> factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 110 (term -> factor moreFactors .)
    SAME_AS         reduce using rule 110 (term -> factor moreFactors .)
    AND             reduce using rule 110 (term -> factor moreFactors .)
    OR              reduce using rule 110 (term -> factor moreFactors .)
    COMMA           reduce using rule 110 (term -> factor moreFactors .)
    RPAREN          reduce using rule 110 (term -> factor moreFactors .)
    NEWLINE         reduce using rule 110 (term -> factor moreFactors .)
    COLON           reduce using rule 110 (term -> factor moreFactors .)


state 106

    (112) moreFactors -> DIVIDE . f_pushOperator factor f_popFactor moreFactors
    (118) f_pushOperator -> .

    LPAREN          reduce using rule 118 (f_pushOperator -> .)
    ID              reduce using rule 118 (f_pushOperator -> .)
    C_BOOL          reduce using rule 118 (f_pushOperator -> .)
    C_INT           reduce using rule 118 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 118 (f_pushOperator -> .)
    C_STRING        reduce using rule 118 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 136

state 107

    (113) moreFactors -> TIMES . f_pushOperator factor f_popFactor moreFactors
    (118) f_pushOperator -> .

    LPAREN          reduce using rule 118 (f_pushOperator -> .)
    ID              reduce using rule 118 (f_pushOperator -> .)
    C_BOOL          reduce using rule 118 (f_pushOperator -> .)
    C_INT           reduce using rule 118 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 118 (f_pushOperator -> .)
    C_STRING        reduce using rule 118 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 137

state 108

    (111) moreFactors -> empty .

    PLUS            reduce using rule 111 (moreFactors -> empty .)
    MINUS           reduce using rule 111 (moreFactors -> empty .)
    GREATER_THAN    reduce using rule 111 (moreFactors -> empty .)
    LESS_THAN       reduce using rule 111 (moreFactors -> empty .)
    LESS_EQUAL_THAN reduce using rule 111 (moreFactors -> empty .)
    GREATER_EQUAL_THAN reduce using rule 111 (moreFactors -> empty .)
    NOT_EQUAL_THAN  reduce using rule 111 (moreFactors -> empty .)
    SAME_AS         reduce using rule 111 (moreFactors -> empty .)
    AND             reduce using rule 111 (moreFactors -> empty .)
    OR              reduce using rule 111 (moreFactors -> empty .)
    NEWLINE         reduce using rule 111 (moreFactors -> empty .)
    RPAREN          reduce using rule 111 (moreFactors -> empty .)
    COMMA           reduce using rule 111 (moreFactors -> empty .)
    COLON           reduce using rule 111 (moreFactors -> empty .)


state 109

    (114) moreFactors -> MOD . f_pushOperator factor f_popFactor moreFactors
    (118) f_pushOperator -> .

    LPAREN          reduce using rule 118 (f_pushOperator -> .)
    ID              reduce using rule 118 (f_pushOperator -> .)
    C_BOOL          reduce using rule 118 (f_pushOperator -> .)
    C_INT           reduce using rule 118 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 118 (f_pushOperator -> .)
    C_STRING        reduce using rule 118 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 138

state 110

    (84) expression -> orExp moreOrExp .

    COMMA           reduce using rule 84 (expression -> orExp moreOrExp .)
    RPAREN          reduce using rule 84 (expression -> orExp moreOrExp .)
    NEWLINE         reduce using rule 84 (expression -> orExp moreOrExp .)
    COLON           reduce using rule 84 (expression -> orExp moreOrExp .)


state 111

    (87) moreOrExp -> OR . f_pushOperator orExp f_popOrExp moreOrExp
    (118) f_pushOperator -> .

    NOT             reduce using rule 118 (f_pushOperator -> .)
    LPAREN          reduce using rule 118 (f_pushOperator -> .)
    ID              reduce using rule 118 (f_pushOperator -> .)
    C_BOOL          reduce using rule 118 (f_pushOperator -> .)
    C_INT           reduce using rule 118 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 118 (f_pushOperator -> .)
    C_STRING        reduce using rule 118 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 139

state 112

    (86) moreOrExp -> empty .

    NEWLINE         reduce using rule 86 (moreOrExp -> empty .)
    RPAREN          reduce using rule 86 (moreOrExp -> empty .)
    COMMA           reduce using rule 86 (moreOrExp -> empty .)
    COLON           reduce using rule 86 (moreOrExp -> empty .)


state 113

    (105) exp -> term moreTerms .

    GREATER_THAN    reduce using rule 105 (exp -> term moreTerms .)
    LESS_THAN       reduce using rule 105 (exp -> term moreTerms .)
    LESS_EQUAL_THAN reduce using rule 105 (exp -> term moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 105 (exp -> term moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 105 (exp -> term moreTerms .)
    SAME_AS         reduce using rule 105 (exp -> term moreTerms .)
    AND             reduce using rule 105 (exp -> term moreTerms .)
    OR              reduce using rule 105 (exp -> term moreTerms .)
    NEWLINE         reduce using rule 105 (exp -> term moreTerms .)
    RPAREN          reduce using rule 105 (exp -> term moreTerms .)
    COMMA           reduce using rule 105 (exp -> term moreTerms .)
    COLON           reduce using rule 105 (exp -> term moreTerms .)


state 114

    (107) moreTerms -> PLUS . f_pushOperator term f_popTerm moreTerms
    (118) f_pushOperator -> .

    LPAREN          reduce using rule 118 (f_pushOperator -> .)
    ID              reduce using rule 118 (f_pushOperator -> .)
    C_BOOL          reduce using rule 118 (f_pushOperator -> .)
    C_INT           reduce using rule 118 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 118 (f_pushOperator -> .)
    C_STRING        reduce using rule 118 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 140

state 115

    (108) moreTerms -> MINUS . f_pushOperator term f_popTerm moreTerms
    (118) f_pushOperator -> .

    LPAREN          reduce using rule 118 (f_pushOperator -> .)
    ID              reduce using rule 118 (f_pushOperator -> .)
    C_BOOL          reduce using rule 118 (f_pushOperator -> .)
    C_INT           reduce using rule 118 (f_pushOperator -> .)
    C_FLOAT         reduce using rule 118 (f_pushOperator -> .)
    C_STRING        reduce using rule 118 (f_pushOperator -> .)

    f_pushOperator                 shift and go to state 141

state 116

    (106) moreTerms -> empty .

    GREATER_THAN    reduce using rule 106 (moreTerms -> empty .)
    LESS_THAN       reduce using rule 106 (moreTerms -> empty .)
    LESS_EQUAL_THAN reduce using rule 106 (moreTerms -> empty .)
    GREATER_EQUAL_THAN reduce using rule 106 (moreTerms -> empty .)
    NOT_EQUAL_THAN  reduce using rule 106 (moreTerms -> empty .)
    SAME_AS         reduce using rule 106 (moreTerms -> empty .)
    AND             reduce using rule 106 (moreTerms -> empty .)
    OR              reduce using rule 106 (moreTerms -> empty .)
    NEWLINE         reduce using rule 106 (moreTerms -> empty .)
    RPAREN          reduce using rule 106 (moreTerms -> empty .)
    COMMA           reduce using rule 106 (moreTerms -> empty .)
    COLON           reduce using rule 106 (moreTerms -> empty .)


state 117

    (115) factor -> LPAREN f_pushOperator . expression RPAREN f_popOperator
    (84) expression -> . orExp moreOrExp
    (85) orExp -> . andExp moreAndExp
    (89) andExp -> . notExp
    (93) notExp -> . boolExp
    (94) notExp -> . NOT f_pushOperator boolExp f_popNotExp
    (96) boolExp -> . exp
    (97) boolExp -> . exp compareToken exp f_popComparation
    (105) exp -> . term moreTerms
    (110) term -> . factor moreFactors
    (115) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (116) factor -> . cvar
    (117) factor -> . funct
    (121) cvar -> . ID f_isID
    (122) cvar -> . C_BOOL f_isConst
    (123) cvar -> . C_INT f_isConst
    (124) cvar -> . C_FLOAT f_isConst
    (125) cvar -> . C_STRING f_isConst
    (77) funct -> . ID f_checkProc LPAREN RPAREN
    (78) funct -> . ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN

    NOT             shift and go to state 94
    LPAREN          shift and go to state 88
    ID              shift and go to state 90
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 89
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 91

    cvar                           shift and go to state 79
    funct                          shift and go to state 82
    boolExp                        shift and go to state 92
    factor                         shift and go to state 84
    notExp                         shift and go to state 85
    orExp                          shift and go to state 86
    term                           shift and go to state 87
    andExp                         shift and go to state 80
    exp                            shift and go to state 93
    expression                     shift and go to state 142

state 118

    (123) cvar -> C_INT f_isConst .

    DIVIDE          reduce using rule 123 (cvar -> C_INT f_isConst .)
    TIMES           reduce using rule 123 (cvar -> C_INT f_isConst .)
    MOD             reduce using rule 123 (cvar -> C_INT f_isConst .)
    PLUS            reduce using rule 123 (cvar -> C_INT f_isConst .)
    MINUS           reduce using rule 123 (cvar -> C_INT f_isConst .)
    GREATER_THAN    reduce using rule 123 (cvar -> C_INT f_isConst .)
    LESS_THAN       reduce using rule 123 (cvar -> C_INT f_isConst .)
    LESS_EQUAL_THAN reduce using rule 123 (cvar -> C_INT f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 123 (cvar -> C_INT f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 123 (cvar -> C_INT f_isConst .)
    SAME_AS         reduce using rule 123 (cvar -> C_INT f_isConst .)
    AND             reduce using rule 123 (cvar -> C_INT f_isConst .)
    OR              reduce using rule 123 (cvar -> C_INT f_isConst .)
    NEWLINE         reduce using rule 123 (cvar -> C_INT f_isConst .)
    RPAREN          reduce using rule 123 (cvar -> C_INT f_isConst .)
    COMMA           reduce using rule 123 (cvar -> C_INT f_isConst .)
    COLON           reduce using rule 123 (cvar -> C_INT f_isConst .)


state 119

    (77) funct -> ID f_checkProc . LPAREN RPAREN
    (78) funct -> ID f_checkProc . LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN

    LPAREN          shift and go to state 143


state 120

    (121) cvar -> ID f_isID .

    DIVIDE          reduce using rule 121 (cvar -> ID f_isID .)
    TIMES           reduce using rule 121 (cvar -> ID f_isID .)
    MOD             reduce using rule 121 (cvar -> ID f_isID .)
    PLUS            reduce using rule 121 (cvar -> ID f_isID .)
    MINUS           reduce using rule 121 (cvar -> ID f_isID .)
    GREATER_THAN    reduce using rule 121 (cvar -> ID f_isID .)
    LESS_THAN       reduce using rule 121 (cvar -> ID f_isID .)
    LESS_EQUAL_THAN reduce using rule 121 (cvar -> ID f_isID .)
    GREATER_EQUAL_THAN reduce using rule 121 (cvar -> ID f_isID .)
    NOT_EQUAL_THAN  reduce using rule 121 (cvar -> ID f_isID .)
    SAME_AS         reduce using rule 121 (cvar -> ID f_isID .)
    AND             reduce using rule 121 (cvar -> ID f_isID .)
    OR              reduce using rule 121 (cvar -> ID f_isID .)
    NEWLINE         reduce using rule 121 (cvar -> ID f_isID .)
    RPAREN          reduce using rule 121 (cvar -> ID f_isID .)
    COMMA           reduce using rule 121 (cvar -> ID f_isID .)
    COLON           reduce using rule 121 (cvar -> ID f_isID .)


state 121

    (125) cvar -> C_STRING f_isConst .

    DIVIDE          reduce using rule 125 (cvar -> C_STRING f_isConst .)
    TIMES           reduce using rule 125 (cvar -> C_STRING f_isConst .)
    MOD             reduce using rule 125 (cvar -> C_STRING f_isConst .)
    PLUS            reduce using rule 125 (cvar -> C_STRING f_isConst .)
    MINUS           reduce using rule 125 (cvar -> C_STRING f_isConst .)
    GREATER_THAN    reduce using rule 125 (cvar -> C_STRING f_isConst .)
    LESS_THAN       reduce using rule 125 (cvar -> C_STRING f_isConst .)
    LESS_EQUAL_THAN reduce using rule 125 (cvar -> C_STRING f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 125 (cvar -> C_STRING f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 125 (cvar -> C_STRING f_isConst .)
    SAME_AS         reduce using rule 125 (cvar -> C_STRING f_isConst .)
    AND             reduce using rule 125 (cvar -> C_STRING f_isConst .)
    OR              reduce using rule 125 (cvar -> C_STRING f_isConst .)
    NEWLINE         reduce using rule 125 (cvar -> C_STRING f_isConst .)
    RPAREN          reduce using rule 125 (cvar -> C_STRING f_isConst .)
    COMMA           reduce using rule 125 (cvar -> C_STRING f_isConst .)
    COLON           reduce using rule 125 (cvar -> C_STRING f_isConst .)


state 122

    (97) boolExp -> exp compareToken . exp f_popComparation
    (105) exp -> . term moreTerms
    (110) term -> . factor moreFactors
    (115) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (116) factor -> . cvar
    (117) factor -> . funct
    (121) cvar -> . ID f_isID
    (122) cvar -> . C_BOOL f_isConst
    (123) cvar -> . C_INT f_isConst
    (124) cvar -> . C_FLOAT f_isConst
    (125) cvar -> . C_STRING f_isConst
    (77) funct -> . ID f_checkProc LPAREN RPAREN
    (78) funct -> . ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN

    LPAREN          shift and go to state 88
    ID              shift and go to state 90
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 89
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 91

    term                           shift and go to state 87
    funct                          shift and go to state 82
    exp                            shift and go to state 144
    factor                         shift and go to state 84
    cvar                           shift and go to state 79

state 123

    (102) compareToken -> GREATER_EQUAL_THAN .

    LPAREN          reduce using rule 102 (compareToken -> GREATER_EQUAL_THAN .)
    ID              reduce using rule 102 (compareToken -> GREATER_EQUAL_THAN .)
    C_BOOL          reduce using rule 102 (compareToken -> GREATER_EQUAL_THAN .)
    C_INT           reduce using rule 102 (compareToken -> GREATER_EQUAL_THAN .)
    C_FLOAT         reduce using rule 102 (compareToken -> GREATER_EQUAL_THAN .)
    C_STRING        reduce using rule 102 (compareToken -> GREATER_EQUAL_THAN .)


state 124

    (101) compareToken -> LESS_EQUAL_THAN .

    LPAREN          reduce using rule 101 (compareToken -> LESS_EQUAL_THAN .)
    ID              reduce using rule 101 (compareToken -> LESS_EQUAL_THAN .)
    C_BOOL          reduce using rule 101 (compareToken -> LESS_EQUAL_THAN .)
    C_INT           reduce using rule 101 (compareToken -> LESS_EQUAL_THAN .)
    C_FLOAT         reduce using rule 101 (compareToken -> LESS_EQUAL_THAN .)
    C_STRING        reduce using rule 101 (compareToken -> LESS_EQUAL_THAN .)


state 125

    (104) compareToken -> SAME_AS .

    LPAREN          reduce using rule 104 (compareToken -> SAME_AS .)
    ID              reduce using rule 104 (compareToken -> SAME_AS .)
    C_BOOL          reduce using rule 104 (compareToken -> SAME_AS .)
    C_INT           reduce using rule 104 (compareToken -> SAME_AS .)
    C_FLOAT         reduce using rule 104 (compareToken -> SAME_AS .)
    C_STRING        reduce using rule 104 (compareToken -> SAME_AS .)


state 126

    (103) compareToken -> NOT_EQUAL_THAN .

    LPAREN          reduce using rule 103 (compareToken -> NOT_EQUAL_THAN .)
    ID              reduce using rule 103 (compareToken -> NOT_EQUAL_THAN .)
    C_BOOL          reduce using rule 103 (compareToken -> NOT_EQUAL_THAN .)
    C_INT           reduce using rule 103 (compareToken -> NOT_EQUAL_THAN .)
    C_FLOAT         reduce using rule 103 (compareToken -> NOT_EQUAL_THAN .)
    C_STRING        reduce using rule 103 (compareToken -> NOT_EQUAL_THAN .)


state 127

    (99) compareToken -> GREATER_THAN .

    LPAREN          reduce using rule 99 (compareToken -> GREATER_THAN .)
    ID              reduce using rule 99 (compareToken -> GREATER_THAN .)
    C_BOOL          reduce using rule 99 (compareToken -> GREATER_THAN .)
    C_INT           reduce using rule 99 (compareToken -> GREATER_THAN .)
    C_FLOAT         reduce using rule 99 (compareToken -> GREATER_THAN .)
    C_STRING        reduce using rule 99 (compareToken -> GREATER_THAN .)


state 128

    (100) compareToken -> LESS_THAN .

    LPAREN          reduce using rule 100 (compareToken -> LESS_THAN .)
    ID              reduce using rule 100 (compareToken -> LESS_THAN .)
    C_BOOL          reduce using rule 100 (compareToken -> LESS_THAN .)
    C_INT           reduce using rule 100 (compareToken -> LESS_THAN .)
    C_FLOAT         reduce using rule 100 (compareToken -> LESS_THAN .)
    C_STRING        reduce using rule 100 (compareToken -> LESS_THAN .)


state 129

    (94) notExp -> NOT f_pushOperator . boolExp f_popNotExp
    (96) boolExp -> . exp
    (97) boolExp -> . exp compareToken exp f_popComparation
    (105) exp -> . term moreTerms
    (110) term -> . factor moreFactors
    (115) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (116) factor -> . cvar
    (117) factor -> . funct
    (121) cvar -> . ID f_isID
    (122) cvar -> . C_BOOL f_isConst
    (123) cvar -> . C_INT f_isConst
    (124) cvar -> . C_FLOAT f_isConst
    (125) cvar -> . C_STRING f_isConst
    (77) funct -> . ID f_checkProc LPAREN RPAREN
    (78) funct -> . ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN

    LPAREN          shift and go to state 88
    ID              shift and go to state 90
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 89
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 91

    boolExp                        shift and go to state 145
    funct                          shift and go to state 82
    term                           shift and go to state 87
    exp                            shift and go to state 93
    factor                         shift and go to state 84
    cvar                           shift and go to state 79

state 130

    (43) moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE . f_resetTab f_generateEqual moreAssign
    (55) f_resetTab -> .

    ID              reduce using rule 55 (f_resetTab -> .)
    DEF             reduce using rule 55 (f_resetTab -> .)
    $end            reduce using rule 55 (f_resetTab -> .)
    TAB             reduce using rule 55 (f_resetTab -> .)
    LOOP            reduce using rule 55 (f_resetTab -> .)
    END             reduce using rule 55 (f_resetTab -> .)
    ELSE            reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 146

state 131

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (23) tipo -> . BOOL f_saveType
    (24) tipo -> . INT f_saveType
    (25) tipo -> . FLOAT f_saveType
    (26) tipo -> . STRING f_saveType
    (27) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 148
    BOOL            shift and go to state 24
    INT             shift and go to state 23
    FLOAT           shift and go to state 21
    STRING          shift and go to state 26
    IMAGE           shift and go to state 25

    tipo                           shift and go to state 147

state 132

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (23) tipo -> . BOOL f_saveType
    (24) tipo -> . INT f_saveType
    (25) tipo -> . FLOAT f_saveType
    (26) tipo -> . STRING f_saveType
    (27) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 150
    BOOL            shift and go to state 24
    INT             shift and go to state 23
    FLOAT           shift and go to state 21
    STRING          shift and go to state 26
    IMAGE           shift and go to state 25

    tipo                           shift and go to state 149

state 133

    (28) functions -> DEF tipo ID f_saveModule LPAREN RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 151


state 134

    (29) functions -> DEF tipo ID f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    ID              shift and go to state 152


state 135

    (91) moreAndExp -> AND f_pushOperator . andExp f_popAndExp moreAndExp
    (89) andExp -> . notExp
    (93) notExp -> . boolExp
    (94) notExp -> . NOT f_pushOperator boolExp f_popNotExp
    (96) boolExp -> . exp
    (97) boolExp -> . exp compareToken exp f_popComparation
    (105) exp -> . term moreTerms
    (110) term -> . factor moreFactors
    (115) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (116) factor -> . cvar
    (117) factor -> . funct
    (121) cvar -> . ID f_isID
    (122) cvar -> . C_BOOL f_isConst
    (123) cvar -> . C_INT f_isConst
    (124) cvar -> . C_FLOAT f_isConst
    (125) cvar -> . C_STRING f_isConst
    (77) funct -> . ID f_checkProc LPAREN RPAREN
    (78) funct -> . ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN

    NOT             shift and go to state 94
    LPAREN          shift and go to state 88
    ID              shift and go to state 90
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 89
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 91

    cvar                           shift and go to state 79
    funct                          shift and go to state 82
    andExp                         shift and go to state 153
    factor                         shift and go to state 84
    notExp                         shift and go to state 85
    term                           shift and go to state 87
    boolExp                        shift and go to state 92
    exp                            shift and go to state 93

state 136

    (112) moreFactors -> DIVIDE f_pushOperator . factor f_popFactor moreFactors
    (115) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (116) factor -> . cvar
    (117) factor -> . funct
    (121) cvar -> . ID f_isID
    (122) cvar -> . C_BOOL f_isConst
    (123) cvar -> . C_INT f_isConst
    (124) cvar -> . C_FLOAT f_isConst
    (125) cvar -> . C_STRING f_isConst
    (77) funct -> . ID f_checkProc LPAREN RPAREN
    (78) funct -> . ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN

    LPAREN          shift and go to state 88
    ID              shift and go to state 90
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 89
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 91

    funct                          shift and go to state 82
    cvar                           shift and go to state 79
    factor                         shift and go to state 154

state 137

    (113) moreFactors -> TIMES f_pushOperator . factor f_popFactor moreFactors
    (115) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (116) factor -> . cvar
    (117) factor -> . funct
    (121) cvar -> . ID f_isID
    (122) cvar -> . C_BOOL f_isConst
    (123) cvar -> . C_INT f_isConst
    (124) cvar -> . C_FLOAT f_isConst
    (125) cvar -> . C_STRING f_isConst
    (77) funct -> . ID f_checkProc LPAREN RPAREN
    (78) funct -> . ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN

    LPAREN          shift and go to state 88
    ID              shift and go to state 90
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 89
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 91

    funct                          shift and go to state 82
    cvar                           shift and go to state 79
    factor                         shift and go to state 155

state 138

    (114) moreFactors -> MOD f_pushOperator . factor f_popFactor moreFactors
    (115) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (116) factor -> . cvar
    (117) factor -> . funct
    (121) cvar -> . ID f_isID
    (122) cvar -> . C_BOOL f_isConst
    (123) cvar -> . C_INT f_isConst
    (124) cvar -> . C_FLOAT f_isConst
    (125) cvar -> . C_STRING f_isConst
    (77) funct -> . ID f_checkProc LPAREN RPAREN
    (78) funct -> . ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN

    LPAREN          shift and go to state 88
    ID              shift and go to state 90
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 89
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 91

    funct                          shift and go to state 82
    cvar                           shift and go to state 79
    factor                         shift and go to state 156

state 139

    (87) moreOrExp -> OR f_pushOperator . orExp f_popOrExp moreOrExp
    (85) orExp -> . andExp moreAndExp
    (89) andExp -> . notExp
    (93) notExp -> . boolExp
    (94) notExp -> . NOT f_pushOperator boolExp f_popNotExp
    (96) boolExp -> . exp
    (97) boolExp -> . exp compareToken exp f_popComparation
    (105) exp -> . term moreTerms
    (110) term -> . factor moreFactors
    (115) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (116) factor -> . cvar
    (117) factor -> . funct
    (121) cvar -> . ID f_isID
    (122) cvar -> . C_BOOL f_isConst
    (123) cvar -> . C_INT f_isConst
    (124) cvar -> . C_FLOAT f_isConst
    (125) cvar -> . C_STRING f_isConst
    (77) funct -> . ID f_checkProc LPAREN RPAREN
    (78) funct -> . ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN

    NOT             shift and go to state 94
    LPAREN          shift and go to state 88
    ID              shift and go to state 90
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 89
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 91

    cvar                           shift and go to state 79
    funct                          shift and go to state 82
    boolExp                        shift and go to state 92
    factor                         shift and go to state 84
    notExp                         shift and go to state 85
    orExp                          shift and go to state 157
    term                           shift and go to state 87
    andExp                         shift and go to state 80
    exp                            shift and go to state 93

state 140

    (107) moreTerms -> PLUS f_pushOperator . term f_popTerm moreTerms
    (110) term -> . factor moreFactors
    (115) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (116) factor -> . cvar
    (117) factor -> . funct
    (121) cvar -> . ID f_isID
    (122) cvar -> . C_BOOL f_isConst
    (123) cvar -> . C_INT f_isConst
    (124) cvar -> . C_FLOAT f_isConst
    (125) cvar -> . C_STRING f_isConst
    (77) funct -> . ID f_checkProc LPAREN RPAREN
    (78) funct -> . ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN

    LPAREN          shift and go to state 88
    ID              shift and go to state 90
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 89
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 91

    term                           shift and go to state 158
    funct                          shift and go to state 82
    factor                         shift and go to state 84
    cvar                           shift and go to state 79

state 141

    (108) moreTerms -> MINUS f_pushOperator . term f_popTerm moreTerms
    (110) term -> . factor moreFactors
    (115) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (116) factor -> . cvar
    (117) factor -> . funct
    (121) cvar -> . ID f_isID
    (122) cvar -> . C_BOOL f_isConst
    (123) cvar -> . C_INT f_isConst
    (124) cvar -> . C_FLOAT f_isConst
    (125) cvar -> . C_STRING f_isConst
    (77) funct -> . ID f_checkProc LPAREN RPAREN
    (78) funct -> . ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN

    LPAREN          shift and go to state 88
    ID              shift and go to state 90
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 89
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 91

    term                           shift and go to state 159
    funct                          shift and go to state 82
    factor                         shift and go to state 84
    cvar                           shift and go to state 79

state 142

    (115) factor -> LPAREN f_pushOperator expression . RPAREN f_popOperator

    RPAREN          shift and go to state 160


state 143

    (77) funct -> ID f_checkProc LPAREN . RPAREN
    (78) funct -> ID f_checkProc LPAREN . f_functCall expression f_genParam f_functCall expressionList RPAREN
    (79) f_functCall -> .

    RPAREN          shift and go to state 161
    NOT             reduce using rule 79 (f_functCall -> .)
    LPAREN          reduce using rule 79 (f_functCall -> .)
    ID              reduce using rule 79 (f_functCall -> .)
    C_BOOL          reduce using rule 79 (f_functCall -> .)
    C_INT           reduce using rule 79 (f_functCall -> .)
    C_FLOAT         reduce using rule 79 (f_functCall -> .)
    C_STRING        reduce using rule 79 (f_functCall -> .)

    f_functCall                    shift and go to state 162

state 144

    (97) boolExp -> exp compareToken exp . f_popComparation
    (98) f_popComparation -> .

    AND             reduce using rule 98 (f_popComparation -> .)
    OR              reduce using rule 98 (f_popComparation -> .)
    NEWLINE         reduce using rule 98 (f_popComparation -> .)
    RPAREN          reduce using rule 98 (f_popComparation -> .)
    COMMA           reduce using rule 98 (f_popComparation -> .)
    COLON           reduce using rule 98 (f_popComparation -> .)

    f_popComparation               shift and go to state 163

state 145

    (94) notExp -> NOT f_pushOperator boolExp . f_popNotExp
    (95) f_popNotExp -> .

    AND             reduce using rule 95 (f_popNotExp -> .)
    OR              reduce using rule 95 (f_popNotExp -> .)
    NEWLINE         reduce using rule 95 (f_popNotExp -> .)
    RPAREN          reduce using rule 95 (f_popNotExp -> .)
    COMMA           reduce using rule 95 (f_popNotExp -> .)
    COLON           reduce using rule 95 (f_popNotExp -> .)

    f_popNotExp                    shift and go to state 164

state 146

    (43) moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab . f_generateEqual moreAssign
    (45) f_generateEqual -> .

    ID              reduce using rule 45 (f_generateEqual -> .)
    DEF             reduce using rule 45 (f_generateEqual -> .)
    $end            reduce using rule 45 (f_generateEqual -> .)
    TAB             reduce using rule 45 (f_generateEqual -> .)
    LOOP            reduce using rule 45 (f_generateEqual -> .)
    END             reduce using rule 45 (f_generateEqual -> .)
    ELSE            reduce using rule 45 (f_generateEqual -> .)

    f_generateEqual                shift and go to state 165

state 147

    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    ID              shift and go to state 166


state 148

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 167


state 149

    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    ID              shift and go to state 168


state 150

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 169


state 151

    (28) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 170


state 152

    (29) functions -> DEF tipo ID f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (40) f_addToParam -> .

    COMMA           reduce using rule 40 (f_addToParam -> .)
    RPAREN          reduce using rule 40 (f_addToParam -> .)

    f_addToParam                   shift and go to state 171

state 153

    (91) moreAndExp -> AND f_pushOperator andExp . f_popAndExp moreAndExp
    (92) f_popAndExp -> .

    AND             reduce using rule 92 (f_popAndExp -> .)
    OR              reduce using rule 92 (f_popAndExp -> .)
    NEWLINE         reduce using rule 92 (f_popAndExp -> .)
    RPAREN          reduce using rule 92 (f_popAndExp -> .)
    COMMA           reduce using rule 92 (f_popAndExp -> .)
    COLON           reduce using rule 92 (f_popAndExp -> .)

    f_popAndExp                    shift and go to state 172

state 154

    (112) moreFactors -> DIVIDE f_pushOperator factor . f_popFactor moreFactors
    (120) f_popFactor -> .

    DIVIDE          reduce using rule 120 (f_popFactor -> .)
    TIMES           reduce using rule 120 (f_popFactor -> .)
    MOD             reduce using rule 120 (f_popFactor -> .)
    PLUS            reduce using rule 120 (f_popFactor -> .)
    MINUS           reduce using rule 120 (f_popFactor -> .)
    GREATER_THAN    reduce using rule 120 (f_popFactor -> .)
    LESS_THAN       reduce using rule 120 (f_popFactor -> .)
    LESS_EQUAL_THAN reduce using rule 120 (f_popFactor -> .)
    GREATER_EQUAL_THAN reduce using rule 120 (f_popFactor -> .)
    NOT_EQUAL_THAN  reduce using rule 120 (f_popFactor -> .)
    SAME_AS         reduce using rule 120 (f_popFactor -> .)
    AND             reduce using rule 120 (f_popFactor -> .)
    OR              reduce using rule 120 (f_popFactor -> .)
    NEWLINE         reduce using rule 120 (f_popFactor -> .)
    RPAREN          reduce using rule 120 (f_popFactor -> .)
    COMMA           reduce using rule 120 (f_popFactor -> .)
    COLON           reduce using rule 120 (f_popFactor -> .)

    f_popFactor                    shift and go to state 173

state 155

    (113) moreFactors -> TIMES f_pushOperator factor . f_popFactor moreFactors
    (120) f_popFactor -> .

    DIVIDE          reduce using rule 120 (f_popFactor -> .)
    TIMES           reduce using rule 120 (f_popFactor -> .)
    MOD             reduce using rule 120 (f_popFactor -> .)
    PLUS            reduce using rule 120 (f_popFactor -> .)
    MINUS           reduce using rule 120 (f_popFactor -> .)
    GREATER_THAN    reduce using rule 120 (f_popFactor -> .)
    LESS_THAN       reduce using rule 120 (f_popFactor -> .)
    LESS_EQUAL_THAN reduce using rule 120 (f_popFactor -> .)
    GREATER_EQUAL_THAN reduce using rule 120 (f_popFactor -> .)
    NOT_EQUAL_THAN  reduce using rule 120 (f_popFactor -> .)
    SAME_AS         reduce using rule 120 (f_popFactor -> .)
    AND             reduce using rule 120 (f_popFactor -> .)
    OR              reduce using rule 120 (f_popFactor -> .)
    NEWLINE         reduce using rule 120 (f_popFactor -> .)
    RPAREN          reduce using rule 120 (f_popFactor -> .)
    COMMA           reduce using rule 120 (f_popFactor -> .)
    COLON           reduce using rule 120 (f_popFactor -> .)

    f_popFactor                    shift and go to state 174

state 156

    (114) moreFactors -> MOD f_pushOperator factor . f_popFactor moreFactors
    (120) f_popFactor -> .

    DIVIDE          reduce using rule 120 (f_popFactor -> .)
    TIMES           reduce using rule 120 (f_popFactor -> .)
    MOD             reduce using rule 120 (f_popFactor -> .)
    PLUS            reduce using rule 120 (f_popFactor -> .)
    MINUS           reduce using rule 120 (f_popFactor -> .)
    GREATER_THAN    reduce using rule 120 (f_popFactor -> .)
    LESS_THAN       reduce using rule 120 (f_popFactor -> .)
    LESS_EQUAL_THAN reduce using rule 120 (f_popFactor -> .)
    GREATER_EQUAL_THAN reduce using rule 120 (f_popFactor -> .)
    NOT_EQUAL_THAN  reduce using rule 120 (f_popFactor -> .)
    SAME_AS         reduce using rule 120 (f_popFactor -> .)
    AND             reduce using rule 120 (f_popFactor -> .)
    OR              reduce using rule 120 (f_popFactor -> .)
    NEWLINE         reduce using rule 120 (f_popFactor -> .)
    RPAREN          reduce using rule 120 (f_popFactor -> .)
    COMMA           reduce using rule 120 (f_popFactor -> .)
    COLON           reduce using rule 120 (f_popFactor -> .)

    f_popFactor                    shift and go to state 175

state 157

    (87) moreOrExp -> OR f_pushOperator orExp . f_popOrExp moreOrExp
    (88) f_popOrExp -> .

    OR              reduce using rule 88 (f_popOrExp -> .)
    NEWLINE         reduce using rule 88 (f_popOrExp -> .)
    RPAREN          reduce using rule 88 (f_popOrExp -> .)
    COMMA           reduce using rule 88 (f_popOrExp -> .)
    COLON           reduce using rule 88 (f_popOrExp -> .)

    f_popOrExp                     shift and go to state 176

state 158

    (107) moreTerms -> PLUS f_pushOperator term . f_popTerm moreTerms
    (109) f_popTerm -> .

    PLUS            reduce using rule 109 (f_popTerm -> .)
    MINUS           reduce using rule 109 (f_popTerm -> .)
    GREATER_THAN    reduce using rule 109 (f_popTerm -> .)
    LESS_THAN       reduce using rule 109 (f_popTerm -> .)
    LESS_EQUAL_THAN reduce using rule 109 (f_popTerm -> .)
    GREATER_EQUAL_THAN reduce using rule 109 (f_popTerm -> .)
    NOT_EQUAL_THAN  reduce using rule 109 (f_popTerm -> .)
    SAME_AS         reduce using rule 109 (f_popTerm -> .)
    AND             reduce using rule 109 (f_popTerm -> .)
    OR              reduce using rule 109 (f_popTerm -> .)
    NEWLINE         reduce using rule 109 (f_popTerm -> .)
    RPAREN          reduce using rule 109 (f_popTerm -> .)
    COMMA           reduce using rule 109 (f_popTerm -> .)
    COLON           reduce using rule 109 (f_popTerm -> .)

    f_popTerm                      shift and go to state 177

state 159

    (108) moreTerms -> MINUS f_pushOperator term . f_popTerm moreTerms
    (109) f_popTerm -> .

    PLUS            reduce using rule 109 (f_popTerm -> .)
    MINUS           reduce using rule 109 (f_popTerm -> .)
    GREATER_THAN    reduce using rule 109 (f_popTerm -> .)
    LESS_THAN       reduce using rule 109 (f_popTerm -> .)
    LESS_EQUAL_THAN reduce using rule 109 (f_popTerm -> .)
    GREATER_EQUAL_THAN reduce using rule 109 (f_popTerm -> .)
    NOT_EQUAL_THAN  reduce using rule 109 (f_popTerm -> .)
    SAME_AS         reduce using rule 109 (f_popTerm -> .)
    AND             reduce using rule 109 (f_popTerm -> .)
    OR              reduce using rule 109 (f_popTerm -> .)
    NEWLINE         reduce using rule 109 (f_popTerm -> .)
    RPAREN          reduce using rule 109 (f_popTerm -> .)
    COMMA           reduce using rule 109 (f_popTerm -> .)
    COLON           reduce using rule 109 (f_popTerm -> .)

    f_popTerm                      shift and go to state 178

state 160

    (115) factor -> LPAREN f_pushOperator expression RPAREN . f_popOperator
    (119) f_popOperator -> .

    DIVIDE          reduce using rule 119 (f_popOperator -> .)
    TIMES           reduce using rule 119 (f_popOperator -> .)
    MOD             reduce using rule 119 (f_popOperator -> .)
    PLUS            reduce using rule 119 (f_popOperator -> .)
    MINUS           reduce using rule 119 (f_popOperator -> .)
    GREATER_THAN    reduce using rule 119 (f_popOperator -> .)
    LESS_THAN       reduce using rule 119 (f_popOperator -> .)
    LESS_EQUAL_THAN reduce using rule 119 (f_popOperator -> .)
    GREATER_EQUAL_THAN reduce using rule 119 (f_popOperator -> .)
    NOT_EQUAL_THAN  reduce using rule 119 (f_popOperator -> .)
    SAME_AS         reduce using rule 119 (f_popOperator -> .)
    AND             reduce using rule 119 (f_popOperator -> .)
    OR              reduce using rule 119 (f_popOperator -> .)
    NEWLINE         reduce using rule 119 (f_popOperator -> .)
    RPAREN          reduce using rule 119 (f_popOperator -> .)
    COMMA           reduce using rule 119 (f_popOperator -> .)
    COLON           reduce using rule 119 (f_popOperator -> .)

    f_popOperator                  shift and go to state 179

state 161

    (77) funct -> ID f_checkProc LPAREN RPAREN .

    DIVIDE          reduce using rule 77 (funct -> ID f_checkProc LPAREN RPAREN .)
    TIMES           reduce using rule 77 (funct -> ID f_checkProc LPAREN RPAREN .)
    MOD             reduce using rule 77 (funct -> ID f_checkProc LPAREN RPAREN .)
    PLUS            reduce using rule 77 (funct -> ID f_checkProc LPAREN RPAREN .)
    MINUS           reduce using rule 77 (funct -> ID f_checkProc LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 77 (funct -> ID f_checkProc LPAREN RPAREN .)
    LESS_THAN       reduce using rule 77 (funct -> ID f_checkProc LPAREN RPAREN .)
    LESS_EQUAL_THAN reduce using rule 77 (funct -> ID f_checkProc LPAREN RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 77 (funct -> ID f_checkProc LPAREN RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 77 (funct -> ID f_checkProc LPAREN RPAREN .)
    SAME_AS         reduce using rule 77 (funct -> ID f_checkProc LPAREN RPAREN .)
    AND             reduce using rule 77 (funct -> ID f_checkProc LPAREN RPAREN .)
    OR              reduce using rule 77 (funct -> ID f_checkProc LPAREN RPAREN .)
    NEWLINE         reduce using rule 77 (funct -> ID f_checkProc LPAREN RPAREN .)
    RPAREN          reduce using rule 77 (funct -> ID f_checkProc LPAREN RPAREN .)
    COMMA           reduce using rule 77 (funct -> ID f_checkProc LPAREN RPAREN .)
    COLON           reduce using rule 77 (funct -> ID f_checkProc LPAREN RPAREN .)


state 162

    (78) funct -> ID f_checkProc LPAREN f_functCall . expression f_genParam f_functCall expressionList RPAREN
    (84) expression -> . orExp moreOrExp
    (85) orExp -> . andExp moreAndExp
    (89) andExp -> . notExp
    (93) notExp -> . boolExp
    (94) notExp -> . NOT f_pushOperator boolExp f_popNotExp
    (96) boolExp -> . exp
    (97) boolExp -> . exp compareToken exp f_popComparation
    (105) exp -> . term moreTerms
    (110) term -> . factor moreFactors
    (115) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (116) factor -> . cvar
    (117) factor -> . funct
    (121) cvar -> . ID f_isID
    (122) cvar -> . C_BOOL f_isConst
    (123) cvar -> . C_INT f_isConst
    (124) cvar -> . C_FLOAT f_isConst
    (125) cvar -> . C_STRING f_isConst
    (77) funct -> . ID f_checkProc LPAREN RPAREN
    (78) funct -> . ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN

    NOT             shift and go to state 94
    LPAREN          shift and go to state 88
    ID              shift and go to state 90
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 89
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 91

    cvar                           shift and go to state 79
    funct                          shift and go to state 82
    boolExp                        shift and go to state 92
    factor                         shift and go to state 84
    notExp                         shift and go to state 85
    orExp                          shift and go to state 86
    term                           shift and go to state 87
    andExp                         shift and go to state 80
    exp                            shift and go to state 93
    expression                     shift and go to state 180

state 163

    (97) boolExp -> exp compareToken exp f_popComparation .

    AND             reduce using rule 97 (boolExp -> exp compareToken exp f_popComparation .)
    OR              reduce using rule 97 (boolExp -> exp compareToken exp f_popComparation .)
    NEWLINE         reduce using rule 97 (boolExp -> exp compareToken exp f_popComparation .)
    RPAREN          reduce using rule 97 (boolExp -> exp compareToken exp f_popComparation .)
    COMMA           reduce using rule 97 (boolExp -> exp compareToken exp f_popComparation .)
    COLON           reduce using rule 97 (boolExp -> exp compareToken exp f_popComparation .)


state 164

    (94) notExp -> NOT f_pushOperator boolExp f_popNotExp .

    AND             reduce using rule 94 (notExp -> NOT f_pushOperator boolExp f_popNotExp .)
    OR              reduce using rule 94 (notExp -> NOT f_pushOperator boolExp f_popNotExp .)
    COLON           reduce using rule 94 (notExp -> NOT f_pushOperator boolExp f_popNotExp .)
    NEWLINE         reduce using rule 94 (notExp -> NOT f_pushOperator boolExp f_popNotExp .)
    COMMA           reduce using rule 94 (notExp -> NOT f_pushOperator boolExp f_popNotExp .)
    RPAREN          reduce using rule 94 (notExp -> NOT f_pushOperator boolExp f_popNotExp .)


state 165

    (43) moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual . moreAssign
    (42) moreAssign -> . empty
    (43) moreAssign -> . f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (4) empty -> .
    (56) f_checkTab -> .

    DEF             reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    TAB             reduce using rule 4 (empty -> .)
    LOOP            reduce using rule 4 (empty -> .)
    END             reduce using rule 4 (empty -> .)
    ELSE            reduce using rule 4 (empty -> .)
    ID              reduce using rule 56 (f_checkTab -> .)

    f_checkTab                     shift and go to state 27
    moreAssign                     shift and go to state 181
    empty                          shift and go to state 29

state 166

    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (40) f_addToParam -> .

    COMMA           reduce using rule 40 (f_addToParam -> .)
    RPAREN          reduce using rule 40 (f_addToParam -> .)

    f_addToParam                   shift and go to state 182

state 167

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 183


state 168

    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (40) f_addToParam -> .

    COMMA           reduce using rule 40 (f_addToParam -> .)
    RPAREN          reduce using rule 40 (f_addToParam -> .)

    f_addToParam                   shift and go to state 184

state 169

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 185


state 170

    (28) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 186

state 171

    (29) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (38) parameterList -> . empty
    (39) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (4) empty -> .

    COMMA           shift and go to state 189
    RPAREN          reduce using rule 4 (empty -> .)

    parameterList                  shift and go to state 187
    empty                          shift and go to state 188

state 172

    (91) moreAndExp -> AND f_pushOperator andExp f_popAndExp . moreAndExp
    (90) moreAndExp -> . empty
    (91) moreAndExp -> . AND f_pushOperator andExp f_popAndExp moreAndExp
    (4) empty -> .

    AND             shift and go to state 100
    OR              reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    COLON           reduce using rule 4 (empty -> .)

    moreAndExp                     shift and go to state 190
    empty                          shift and go to state 102

state 173

    (112) moreFactors -> DIVIDE f_pushOperator factor f_popFactor . moreFactors
    (111) moreFactors -> . empty
    (112) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (113) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (114) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (4) empty -> .

    DIVIDE          shift and go to state 106
    TIMES           shift and go to state 107
    MOD             shift and go to state 109
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GREATER_THAN    reduce using rule 4 (empty -> .)
    LESS_THAN       reduce using rule 4 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 4 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 4 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 4 (empty -> .)
    SAME_AS         reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    COLON           reduce using rule 4 (empty -> .)

    moreFactors                    shift and go to state 191
    empty                          shift and go to state 108

state 174

    (113) moreFactors -> TIMES f_pushOperator factor f_popFactor . moreFactors
    (111) moreFactors -> . empty
    (112) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (113) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (114) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (4) empty -> .

    DIVIDE          shift and go to state 106
    TIMES           shift and go to state 107
    MOD             shift and go to state 109
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GREATER_THAN    reduce using rule 4 (empty -> .)
    LESS_THAN       reduce using rule 4 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 4 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 4 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 4 (empty -> .)
    SAME_AS         reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    COLON           reduce using rule 4 (empty -> .)

    moreFactors                    shift and go to state 192
    empty                          shift and go to state 108

state 175

    (114) moreFactors -> MOD f_pushOperator factor f_popFactor . moreFactors
    (111) moreFactors -> . empty
    (112) moreFactors -> . DIVIDE f_pushOperator factor f_popFactor moreFactors
    (113) moreFactors -> . TIMES f_pushOperator factor f_popFactor moreFactors
    (114) moreFactors -> . MOD f_pushOperator factor f_popFactor moreFactors
    (4) empty -> .

    DIVIDE          shift and go to state 106
    TIMES           shift and go to state 107
    MOD             shift and go to state 109
    PLUS            reduce using rule 4 (empty -> .)
    MINUS           reduce using rule 4 (empty -> .)
    GREATER_THAN    reduce using rule 4 (empty -> .)
    LESS_THAN       reduce using rule 4 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 4 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 4 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 4 (empty -> .)
    SAME_AS         reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    COLON           reduce using rule 4 (empty -> .)

    moreFactors                    shift and go to state 193
    empty                          shift and go to state 108

state 176

    (87) moreOrExp -> OR f_pushOperator orExp f_popOrExp . moreOrExp
    (86) moreOrExp -> . empty
    (87) moreOrExp -> . OR f_pushOperator orExp f_popOrExp moreOrExp
    (4) empty -> .

    OR              shift and go to state 111
    NEWLINE         reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    COLON           reduce using rule 4 (empty -> .)

    moreOrExp                      shift and go to state 194
    empty                          shift and go to state 112

state 177

    (107) moreTerms -> PLUS f_pushOperator term f_popTerm . moreTerms
    (106) moreTerms -> . empty
    (107) moreTerms -> . PLUS f_pushOperator term f_popTerm moreTerms
    (108) moreTerms -> . MINUS f_pushOperator term f_popTerm moreTerms
    (4) empty -> .

    PLUS            shift and go to state 114
    MINUS           shift and go to state 115
    GREATER_THAN    reduce using rule 4 (empty -> .)
    LESS_THAN       reduce using rule 4 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 4 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 4 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 4 (empty -> .)
    SAME_AS         reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    COLON           reduce using rule 4 (empty -> .)

    moreTerms                      shift and go to state 195
    empty                          shift and go to state 116

state 178

    (108) moreTerms -> MINUS f_pushOperator term f_popTerm . moreTerms
    (106) moreTerms -> . empty
    (107) moreTerms -> . PLUS f_pushOperator term f_popTerm moreTerms
    (108) moreTerms -> . MINUS f_pushOperator term f_popTerm moreTerms
    (4) empty -> .

    PLUS            shift and go to state 114
    MINUS           shift and go to state 115
    GREATER_THAN    reduce using rule 4 (empty -> .)
    LESS_THAN       reduce using rule 4 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 4 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 4 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 4 (empty -> .)
    SAME_AS         reduce using rule 4 (empty -> .)
    AND             reduce using rule 4 (empty -> .)
    OR              reduce using rule 4 (empty -> .)
    NEWLINE         reduce using rule 4 (empty -> .)
    RPAREN          reduce using rule 4 (empty -> .)
    COMMA           reduce using rule 4 (empty -> .)
    COLON           reduce using rule 4 (empty -> .)

    moreTerms                      shift and go to state 196
    empty                          shift and go to state 116

state 179

    (115) factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .

    DIVIDE          reduce using rule 115 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    TIMES           reduce using rule 115 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    MOD             reduce using rule 115 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    PLUS            reduce using rule 115 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    MINUS           reduce using rule 115 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    GREATER_THAN    reduce using rule 115 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    LESS_THAN       reduce using rule 115 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    LESS_EQUAL_THAN reduce using rule 115 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    GREATER_EQUAL_THAN reduce using rule 115 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    NOT_EQUAL_THAN  reduce using rule 115 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    SAME_AS         reduce using rule 115 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    AND             reduce using rule 115 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    OR              reduce using rule 115 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    COLON           reduce using rule 115 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    NEWLINE         reduce using rule 115 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    RPAREN          reduce using rule 115 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)
    COMMA           reduce using rule 115 (factor -> LPAREN f_pushOperator expression RPAREN f_popOperator .)


state 180

    (78) funct -> ID f_checkProc LPAREN f_functCall expression . f_genParam f_functCall expressionList RPAREN
    (83) f_genParam -> .

    COMMA           reduce using rule 83 (f_genParam -> .)
    RPAREN          reduce using rule 83 (f_genParam -> .)

    f_genParam                     shift and go to state 197

state 181

    (43) moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .

    TAB             reduce using rule 43 (moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    DEF             reduce using rule 43 (moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    $end            reduce using rule 43 (moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    LOOP            reduce using rule 43 (moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    END             reduce using rule 43 (moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    ELSE            reduce using rule 43 (moreAssign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)


state 182

    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (38) parameterList -> . empty
    (39) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (4) empty -> .

    COMMA           shift and go to state 189
    RPAREN          reduce using rule 4 (empty -> .)

    parameterList                  shift and go to state 198
    empty                          shift and go to state 188

state 183

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 199

state 184

    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (38) parameterList -> . empty
    (39) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (4) empty -> .

    COMMA           shift and go to state 189
    RPAREN          reduce using rule 4 (empty -> .)

    parameterList                  shift and go to state 200
    empty                          shift and go to state 188

state 185

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 201

state 186

    (28) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (53) f_incTab -> .

    TAB             reduce using rule 53 (f_incTab -> .)

    f_incTab                       shift and go to state 202

state 187

    (29) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    RPAREN          shift and go to state 203


state 188

    (38) parameterList -> empty .

    RPAREN          reduce using rule 38 (parameterList -> empty .)


state 189

    (39) parameterList -> COMMA . tipo ID f_addToParam parameterList
    (23) tipo -> . BOOL f_saveType
    (24) tipo -> . INT f_saveType
    (25) tipo -> . FLOAT f_saveType
    (26) tipo -> . STRING f_saveType
    (27) tipo -> . IMAGE f_saveType

    BOOL            shift and go to state 24
    INT             shift and go to state 23
    FLOAT           shift and go to state 21
    STRING          shift and go to state 26
    IMAGE           shift and go to state 25

    tipo                           shift and go to state 204

state 190

    (91) moreAndExp -> AND f_pushOperator andExp f_popAndExp moreAndExp .

    OR              reduce using rule 91 (moreAndExp -> AND f_pushOperator andExp f_popAndExp moreAndExp .)
    NEWLINE         reduce using rule 91 (moreAndExp -> AND f_pushOperator andExp f_popAndExp moreAndExp .)
    RPAREN          reduce using rule 91 (moreAndExp -> AND f_pushOperator andExp f_popAndExp moreAndExp .)
    COMMA           reduce using rule 91 (moreAndExp -> AND f_pushOperator andExp f_popAndExp moreAndExp .)
    COLON           reduce using rule 91 (moreAndExp -> AND f_pushOperator andExp f_popAndExp moreAndExp .)


state 191

    (112) moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .

    PLUS            reduce using rule 112 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    MINUS           reduce using rule 112 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    GREATER_THAN    reduce using rule 112 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    LESS_THAN       reduce using rule 112 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 112 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 112 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 112 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    SAME_AS         reduce using rule 112 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    AND             reduce using rule 112 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    OR              reduce using rule 112 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    NEWLINE         reduce using rule 112 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    RPAREN          reduce using rule 112 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    COMMA           reduce using rule 112 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)
    COLON           reduce using rule 112 (moreFactors -> DIVIDE f_pushOperator factor f_popFactor moreFactors .)


state 192

    (113) moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .

    PLUS            reduce using rule 113 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    MINUS           reduce using rule 113 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    GREATER_THAN    reduce using rule 113 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    LESS_THAN       reduce using rule 113 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 113 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 113 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 113 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    SAME_AS         reduce using rule 113 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    AND             reduce using rule 113 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    OR              reduce using rule 113 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    NEWLINE         reduce using rule 113 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    RPAREN          reduce using rule 113 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    COMMA           reduce using rule 113 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)
    COLON           reduce using rule 113 (moreFactors -> TIMES f_pushOperator factor f_popFactor moreFactors .)


state 193

    (114) moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .

    PLUS            reduce using rule 114 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    MINUS           reduce using rule 114 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    GREATER_THAN    reduce using rule 114 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    LESS_THAN       reduce using rule 114 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 114 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 114 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 114 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    SAME_AS         reduce using rule 114 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    AND             reduce using rule 114 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    OR              reduce using rule 114 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    NEWLINE         reduce using rule 114 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    RPAREN          reduce using rule 114 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    COMMA           reduce using rule 114 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)
    COLON           reduce using rule 114 (moreFactors -> MOD f_pushOperator factor f_popFactor moreFactors .)


state 194

    (87) moreOrExp -> OR f_pushOperator orExp f_popOrExp moreOrExp .

    NEWLINE         reduce using rule 87 (moreOrExp -> OR f_pushOperator orExp f_popOrExp moreOrExp .)
    RPAREN          reduce using rule 87 (moreOrExp -> OR f_pushOperator orExp f_popOrExp moreOrExp .)
    COMMA           reduce using rule 87 (moreOrExp -> OR f_pushOperator orExp f_popOrExp moreOrExp .)
    COLON           reduce using rule 87 (moreOrExp -> OR f_pushOperator orExp f_popOrExp moreOrExp .)


state 195

    (107) moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .

    GREATER_THAN    reduce using rule 107 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    LESS_THAN       reduce using rule 107 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    LESS_EQUAL_THAN reduce using rule 107 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 107 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 107 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    SAME_AS         reduce using rule 107 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    AND             reduce using rule 107 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    OR              reduce using rule 107 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    NEWLINE         reduce using rule 107 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    RPAREN          reduce using rule 107 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    COMMA           reduce using rule 107 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)
    COLON           reduce using rule 107 (moreTerms -> PLUS f_pushOperator term f_popTerm moreTerms .)


state 196

    (108) moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .

    GREATER_THAN    reduce using rule 108 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    LESS_THAN       reduce using rule 108 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    LESS_EQUAL_THAN reduce using rule 108 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 108 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 108 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    SAME_AS         reduce using rule 108 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    AND             reduce using rule 108 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    OR              reduce using rule 108 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    NEWLINE         reduce using rule 108 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    RPAREN          reduce using rule 108 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    COMMA           reduce using rule 108 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)
    COLON           reduce using rule 108 (moreTerms -> MINUS f_pushOperator term f_popTerm moreTerms .)


state 197

    (78) funct -> ID f_checkProc LPAREN f_functCall expression f_genParam . f_functCall expressionList RPAREN
    (79) f_functCall -> .

    COMMA           reduce using rule 79 (f_functCall -> .)
    RPAREN          reduce using rule 79 (f_functCall -> .)

    f_functCall                    shift and go to state 205

state 198

    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    RPAREN          shift and go to state 206


state 199

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (53) f_incTab -> .

    TAB             reduce using rule 53 (f_incTab -> .)

    f_incTab                       shift and go to state 207

state 200

    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    RPAREN          shift and go to state 208


state 201

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (53) f_incTab -> .

    TAB             reduce using rule 53 (f_incTab -> .)

    f_incTab                       shift and go to state 209

state 202

    (28) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (49) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 211

    block                          shift and go to state 210

state 203

    (29) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 212


state 204

    (39) parameterList -> COMMA tipo . ID f_addToParam parameterList

    ID              shift and go to state 213


state 205

    (78) funct -> ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall . expressionList RPAREN
    (81) expressionList -> . empty
    (82) expressionList -> . COMMA expression f_genParam expressionList
    (4) empty -> .

    COMMA           shift and go to state 215
    RPAREN          reduce using rule 4 (empty -> .)

    expressionList                 shift and go to state 214
    empty                          shift and go to state 216

state 206

    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 217


state 207

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (49) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 211

    block                          shift and go to state 218

state 208

    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . COLON NEWLINE f_resetTab f_incTab block f_endModule functions

    COLON           shift and go to state 219


state 209

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (49) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 211

    block                          shift and go to state 220

state 210

    (28) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (36) f_endModule -> .

    DEF             reduce using rule 36 (f_endModule -> .)
    $end            reduce using rule 36 (f_endModule -> .)

    f_endModule                    shift and go to state 221

state 211

    (49) block -> TAB . f_addTab moreTabs statement moreStatements
    (54) f_addTab -> .

    TAB             reduce using rule 54 (f_addTab -> .)
    NEWLINE         reduce using rule 54 (f_addTab -> .)
    RETURN          reduce using rule 54 (f_addTab -> .)
    ID              reduce using rule 54 (f_addTab -> .)
    WHILE           reduce using rule 54 (f_addTab -> .)
    IF              reduce using rule 54 (f_addTab -> .)
    DO              reduce using rule 54 (f_addTab -> .)
    BOOL            reduce using rule 54 (f_addTab -> .)
    INT             reduce using rule 54 (f_addTab -> .)
    FLOAT           reduce using rule 54 (f_addTab -> .)
    STRING          reduce using rule 54 (f_addTab -> .)
    IMAGE           reduce using rule 54 (f_addTab -> .)
    DEF             reduce using rule 54 (f_addTab -> .)
    $end            reduce using rule 54 (f_addTab -> .)
    LOOP            reduce using rule 54 (f_addTab -> .)
    END             reduce using rule 54 (f_addTab -> .)
    ELSE            reduce using rule 54 (f_addTab -> .)

    f_addTab                       shift and go to state 222

state 212

    (29) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 223


state 213

    (39) parameterList -> COMMA tipo ID . f_addToParam parameterList
    (40) f_addToParam -> .

    COMMA           reduce using rule 40 (f_addToParam -> .)
    RPAREN          reduce using rule 40 (f_addToParam -> .)

    f_addToParam                   shift and go to state 224

state 214

    (78) funct -> ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList . RPAREN

    RPAREN          shift and go to state 225


state 215

    (82) expressionList -> COMMA . expression f_genParam expressionList
    (84) expression -> . orExp moreOrExp
    (85) orExp -> . andExp moreAndExp
    (89) andExp -> . notExp
    (93) notExp -> . boolExp
    (94) notExp -> . NOT f_pushOperator boolExp f_popNotExp
    (96) boolExp -> . exp
    (97) boolExp -> . exp compareToken exp f_popComparation
    (105) exp -> . term moreTerms
    (110) term -> . factor moreFactors
    (115) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (116) factor -> . cvar
    (117) factor -> . funct
    (121) cvar -> . ID f_isID
    (122) cvar -> . C_BOOL f_isConst
    (123) cvar -> . C_INT f_isConst
    (124) cvar -> . C_FLOAT f_isConst
    (125) cvar -> . C_STRING f_isConst
    (77) funct -> . ID f_checkProc LPAREN RPAREN
    (78) funct -> . ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN

    NOT             shift and go to state 94
    LPAREN          shift and go to state 88
    ID              shift and go to state 90
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 89
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 91

    cvar                           shift and go to state 79
    funct                          shift and go to state 82
    boolExp                        shift and go to state 92
    factor                         shift and go to state 84
    notExp                         shift and go to state 85
    orExp                          shift and go to state 86
    term                           shift and go to state 87
    andExp                         shift and go to state 80
    exp                            shift and go to state 93
    expression                     shift and go to state 226

state 216

    (81) expressionList -> empty .

    RPAREN          reduce using rule 81 (expressionList -> empty .)


state 217

    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 227


state 218

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (36) f_endModule -> .

    DEF             reduce using rule 36 (f_endModule -> .)
    $end            reduce using rule 36 (f_endModule -> .)

    f_endModule                    shift and go to state 228

state 219

    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON . NEWLINE f_resetTab f_incTab block f_endModule functions

    NEWLINE         shift and go to state 229


state 220

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (36) f_endModule -> .

    DEF             reduce using rule 36 (f_endModule -> .)
    $end            reduce using rule 36 (f_endModule -> .)

    f_endModule                    shift and go to state 230

state 221

    (28) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (34) functions -> . empty
    (4) empty -> .

    DEF             shift and go to state 44
    $end            reduce using rule 4 (empty -> .)

    functions                      shift and go to state 231
    empty                          shift and go to state 46

state 222

    (49) block -> TAB f_addTab . moreTabs statement moreStatements
    (50) moreTabs -> . empty
    (51) moreTabs -> . TAB f_addTab moreTabs
    (52) moreTabs -> . NEWLINE f_resetTab TAB f_addTab moreTabs
    (4) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 233
    NEWLINE         shift and go to state 234
    RETURN          reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    WHILE           reduce using rule 4 (empty -> .)
    IF              reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    BOOL            reduce using rule 4 (empty -> .)
    INT             reduce using rule 4 (empty -> .)
    FLOAT           reduce using rule 4 (empty -> .)
    STRING          reduce using rule 4 (empty -> .)
    IMAGE           reduce using rule 4 (empty -> .)
    DEF             reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    LOOP            reduce using rule 4 (empty -> .)
    END             reduce using rule 4 (empty -> .)
    ELSE            reduce using rule 4 (empty -> .)

  ! TAB             [ reduce using rule 4 (empty -> .) ]

    moreTabs                       shift and go to state 232
    empty                          shift and go to state 235

state 223

    (29) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 236

state 224

    (39) parameterList -> COMMA tipo ID f_addToParam . parameterList
    (38) parameterList -> . empty
    (39) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (4) empty -> .

    COMMA           shift and go to state 189
    RPAREN          reduce using rule 4 (empty -> .)

    parameterList                  shift and go to state 237
    empty                          shift and go to state 188

state 225

    (78) funct -> ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN .

    DIVIDE          reduce using rule 78 (funct -> ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN .)
    TIMES           reduce using rule 78 (funct -> ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN .)
    MOD             reduce using rule 78 (funct -> ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN .)
    PLUS            reduce using rule 78 (funct -> ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN .)
    MINUS           reduce using rule 78 (funct -> ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN .)
    GREATER_THAN    reduce using rule 78 (funct -> ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN .)
    LESS_THAN       reduce using rule 78 (funct -> ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN .)
    LESS_EQUAL_THAN reduce using rule 78 (funct -> ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 78 (funct -> ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 78 (funct -> ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN .)
    SAME_AS         reduce using rule 78 (funct -> ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN .)
    AND             reduce using rule 78 (funct -> ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN .)
    OR              reduce using rule 78 (funct -> ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN .)
    NEWLINE         reduce using rule 78 (funct -> ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN .)
    RPAREN          reduce using rule 78 (funct -> ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN .)
    COMMA           reduce using rule 78 (funct -> ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN .)
    COLON           reduce using rule 78 (funct -> ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN .)


state 226

    (82) expressionList -> COMMA expression . f_genParam expressionList
    (83) f_genParam -> .

    COMMA           reduce using rule 83 (f_genParam -> .)
    RPAREN          reduce using rule 83 (f_genParam -> .)

    f_genParam                     shift and go to state 238

state 227

    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 239

state 228

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (34) functions -> . empty
    (4) empty -> .

    DEF             shift and go to state 44
    $end            reduce using rule 4 (empty -> .)

    functions                      shift and go to state 240
    empty                          shift and go to state 46

state 229

    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE . f_resetTab f_incTab block f_endModule functions
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 241

state 230

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (34) functions -> . empty
    (4) empty -> .

    DEF             shift and go to state 44
    $end            reduce using rule 4 (empty -> .)

    functions                      shift and go to state 242
    empty                          shift and go to state 46

state 231

    (28) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 28 (functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 232

    (49) block -> TAB f_addTab moreTabs . statement moreStatements
    (57) statement -> . vars
    (58) statement -> . assign
    (59) statement -> . f_checkTab condition
    (60) statement -> . f_checkTab doCycle
    (61) statement -> . cycle
    (62) statement -> . f_checkTab funct NEWLINE f_resetTab
    (63) statement -> . f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab
    (64) statement -> . empty
    (17) vars -> . f_checkTab tipo idList NEWLINE f_resetTab moreVars
    (41) assign -> . f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (56) f_checkTab -> .
    (67) cycle -> . f_checkTab WHILE f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab
    (4) empty -> .

    RETURN          reduce using rule 56 (f_checkTab -> .)
    ID              reduce using rule 56 (f_checkTab -> .)
    WHILE           reduce using rule 56 (f_checkTab -> .)
    IF              reduce using rule 56 (f_checkTab -> .)
    DO              reduce using rule 56 (f_checkTab -> .)
    BOOL            reduce using rule 56 (f_checkTab -> .)
    INT             reduce using rule 56 (f_checkTab -> .)
    FLOAT           reduce using rule 56 (f_checkTab -> .)
    STRING          reduce using rule 56 (f_checkTab -> .)
    IMAGE           reduce using rule 56 (f_checkTab -> .)
    TAB             reduce using rule 4 (empty -> .)
    DEF             reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    LOOP            reduce using rule 4 (empty -> .)
    END             reduce using rule 4 (empty -> .)
    ELSE            reduce using rule 4 (empty -> .)

    vars                           shift and go to state 243
    f_checkTab                     shift and go to state 244
    statement                      shift and go to state 246
    empty                          shift and go to state 245
    cycle                          shift and go to state 247
    assign                         shift and go to state 248

state 233

    (51) moreTabs -> TAB . f_addTab moreTabs
    (54) f_addTab -> .

    TAB             reduce using rule 54 (f_addTab -> .)
    NEWLINE         reduce using rule 54 (f_addTab -> .)
    RETURN          reduce using rule 54 (f_addTab -> .)
    ID              reduce using rule 54 (f_addTab -> .)
    WHILE           reduce using rule 54 (f_addTab -> .)
    IF              reduce using rule 54 (f_addTab -> .)
    DO              reduce using rule 54 (f_addTab -> .)
    BOOL            reduce using rule 54 (f_addTab -> .)
    INT             reduce using rule 54 (f_addTab -> .)
    FLOAT           reduce using rule 54 (f_addTab -> .)
    STRING          reduce using rule 54 (f_addTab -> .)
    IMAGE           reduce using rule 54 (f_addTab -> .)
    DEF             reduce using rule 54 (f_addTab -> .)
    $end            reduce using rule 54 (f_addTab -> .)
    LOOP            reduce using rule 54 (f_addTab -> .)
    END             reduce using rule 54 (f_addTab -> .)
    ELSE            reduce using rule 54 (f_addTab -> .)

    f_addTab                       shift and go to state 249

state 234

    (52) moreTabs -> NEWLINE . f_resetTab TAB f_addTab moreTabs
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 250

state 235

    (50) moreTabs -> empty .

    TAB             reduce using rule 50 (moreTabs -> empty .)
    RETURN          reduce using rule 50 (moreTabs -> empty .)
    ID              reduce using rule 50 (moreTabs -> empty .)
    WHILE           reduce using rule 50 (moreTabs -> empty .)
    IF              reduce using rule 50 (moreTabs -> empty .)
    DO              reduce using rule 50 (moreTabs -> empty .)
    BOOL            reduce using rule 50 (moreTabs -> empty .)
    INT             reduce using rule 50 (moreTabs -> empty .)
    FLOAT           reduce using rule 50 (moreTabs -> empty .)
    STRING          reduce using rule 50 (moreTabs -> empty .)
    IMAGE           reduce using rule 50 (moreTabs -> empty .)
    DEF             reduce using rule 50 (moreTabs -> empty .)
    $end            reduce using rule 50 (moreTabs -> empty .)
    LOOP            reduce using rule 50 (moreTabs -> empty .)
    END             reduce using rule 50 (moreTabs -> empty .)
    ELSE            reduce using rule 50 (moreTabs -> empty .)


state 236

    (29) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (53) f_incTab -> .

    TAB             reduce using rule 53 (f_incTab -> .)

    f_incTab                       shift and go to state 251

state 237

    (39) parameterList -> COMMA tipo ID f_addToParam parameterList .

    RPAREN          reduce using rule 39 (parameterList -> COMMA tipo ID f_addToParam parameterList .)


state 238

    (82) expressionList -> COMMA expression f_genParam . expressionList
    (81) expressionList -> . empty
    (82) expressionList -> . COMMA expression f_genParam expressionList
    (4) empty -> .

    COMMA           shift and go to state 215
    RPAREN          reduce using rule 4 (empty -> .)

    expressionList                 shift and go to state 252
    empty                          shift and go to state 216

state 239

    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (53) f_incTab -> .

    TAB             reduce using rule 53 (f_incTab -> .)

    f_incTab                       shift and go to state 253

state 240

    (32) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 32 (functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 241

    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab . f_incTab block f_endModule functions
    (53) f_incTab -> .

    TAB             reduce using rule 53 (f_incTab -> .)

    f_incTab                       shift and go to state 254

state 242

    (30) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 30 (functions -> DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 243

    (57) statement -> vars .

    TAB             reduce using rule 57 (statement -> vars .)
    DEF             reduce using rule 57 (statement -> vars .)
    $end            reduce using rule 57 (statement -> vars .)
    LOOP            reduce using rule 57 (statement -> vars .)
    END             reduce using rule 57 (statement -> vars .)
    ELSE            reduce using rule 57 (statement -> vars .)


state 244

    (59) statement -> f_checkTab . condition
    (60) statement -> f_checkTab . doCycle
    (62) statement -> f_checkTab . funct NEWLINE f_resetTab
    (63) statement -> f_checkTab . RETURN f_isReturn expression f_return NEWLINE f_resetTab
    (17) vars -> f_checkTab . tipo idList NEWLINE f_resetTab moreVars
    (41) assign -> f_checkTab . ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (67) cycle -> f_checkTab . WHILE f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab
    (68) condition -> . IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab
    (69) condition -> . IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab
    (71) doCycle -> . DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression f_endCondition NEWLINE f_resetTab
    (77) funct -> . ID f_checkProc LPAREN RPAREN
    (78) funct -> . ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN
    (23) tipo -> . BOOL f_saveType
    (24) tipo -> . INT f_saveType
    (25) tipo -> . FLOAT f_saveType
    (26) tipo -> . STRING f_saveType
    (27) tipo -> . IMAGE f_saveType

    RETURN          shift and go to state 256
    ID              shift and go to state 261
    WHILE           shift and go to state 258
    IF              shift and go to state 263
    DO              shift and go to state 255
    BOOL            shift and go to state 24
    INT             shift and go to state 23
    FLOAT           shift and go to state 21
    STRING          shift and go to state 26
    IMAGE           shift and go to state 25

    funct                          shift and go to state 257
    tipo                           shift and go to state 259
    doCycle                        shift and go to state 260
    condition                      shift and go to state 262

state 245

    (64) statement -> empty .

    TAB             reduce using rule 64 (statement -> empty .)
    DEF             reduce using rule 64 (statement -> empty .)
    $end            reduce using rule 64 (statement -> empty .)
    LOOP            reduce using rule 64 (statement -> empty .)
    END             reduce using rule 64 (statement -> empty .)
    ELSE            reduce using rule 64 (statement -> empty .)


state 246

    (49) block -> TAB f_addTab moreTabs statement . moreStatements
    (47) moreStatements -> . empty
    (48) moreStatements -> . TAB f_addTab moreTabs statement moreStatements
    (4) empty -> .

    TAB             shift and go to state 264
    DEF             reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    LOOP            reduce using rule 4 (empty -> .)
    END             reduce using rule 4 (empty -> .)
    ELSE            reduce using rule 4 (empty -> .)

    empty                          shift and go to state 265
    moreStatements                 shift and go to state 266

state 247

    (61) statement -> cycle .

    TAB             reduce using rule 61 (statement -> cycle .)
    DEF             reduce using rule 61 (statement -> cycle .)
    $end            reduce using rule 61 (statement -> cycle .)
    LOOP            reduce using rule 61 (statement -> cycle .)
    END             reduce using rule 61 (statement -> cycle .)
    ELSE            reduce using rule 61 (statement -> cycle .)


state 248

    (58) statement -> assign .

    TAB             reduce using rule 58 (statement -> assign .)
    DEF             reduce using rule 58 (statement -> assign .)
    $end            reduce using rule 58 (statement -> assign .)
    LOOP            reduce using rule 58 (statement -> assign .)
    END             reduce using rule 58 (statement -> assign .)
    ELSE            reduce using rule 58 (statement -> assign .)


state 249

    (51) moreTabs -> TAB f_addTab . moreTabs
    (50) moreTabs -> . empty
    (51) moreTabs -> . TAB f_addTab moreTabs
    (52) moreTabs -> . NEWLINE f_resetTab TAB f_addTab moreTabs
    (4) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 233
    NEWLINE         shift and go to state 234
    RETURN          reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    WHILE           reduce using rule 4 (empty -> .)
    IF              reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    BOOL            reduce using rule 4 (empty -> .)
    INT             reduce using rule 4 (empty -> .)
    FLOAT           reduce using rule 4 (empty -> .)
    STRING          reduce using rule 4 (empty -> .)
    IMAGE           reduce using rule 4 (empty -> .)
    DEF             reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    LOOP            reduce using rule 4 (empty -> .)
    END             reduce using rule 4 (empty -> .)
    ELSE            reduce using rule 4 (empty -> .)

  ! TAB             [ reduce using rule 4 (empty -> .) ]

    empty                          shift and go to state 235
    moreTabs                       shift and go to state 267

state 250

    (52) moreTabs -> NEWLINE f_resetTab . TAB f_addTab moreTabs

    TAB             shift and go to state 268


state 251

    (29) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (49) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 211

    block                          shift and go to state 269

state 252

    (82) expressionList -> COMMA expression f_genParam expressionList .

    RPAREN          reduce using rule 82 (expressionList -> COMMA expression f_genParam expressionList .)


state 253

    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (49) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 211

    block                          shift and go to state 270

state 254

    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab . block f_endModule functions
    (49) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 211

    block                          shift and go to state 271

state 255

    (71) doCycle -> DO . f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression f_endCondition NEWLINE f_resetTab
    (73) f_pushDo -> .

    COLON           reduce using rule 73 (f_pushDo -> .)

    f_pushDo                       shift and go to state 272

state 256

    (63) statement -> f_checkTab RETURN . f_isReturn expression f_return NEWLINE f_resetTab
    (65) f_isReturn -> .

    NOT             reduce using rule 65 (f_isReturn -> .)
    LPAREN          reduce using rule 65 (f_isReturn -> .)
    ID              reduce using rule 65 (f_isReturn -> .)
    C_BOOL          reduce using rule 65 (f_isReturn -> .)
    C_INT           reduce using rule 65 (f_isReturn -> .)
    C_FLOAT         reduce using rule 65 (f_isReturn -> .)
    C_STRING        reduce using rule 65 (f_isReturn -> .)

    f_isReturn                     shift and go to state 273

state 257

    (62) statement -> f_checkTab funct . NEWLINE f_resetTab

    NEWLINE         shift and go to state 274


state 258

    (67) cycle -> f_checkTab WHILE . f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab
    (75) f_isCondition -> .

    NOT             reduce using rule 75 (f_isCondition -> .)
    LPAREN          reduce using rule 75 (f_isCondition -> .)
    ID              reduce using rule 75 (f_isCondition -> .)
    C_BOOL          reduce using rule 75 (f_isCondition -> .)
    C_INT           reduce using rule 75 (f_isCondition -> .)
    C_FLOAT         reduce using rule 75 (f_isCondition -> .)
    C_STRING        reduce using rule 75 (f_isCondition -> .)

    f_isCondition                  shift and go to state 275

state 259

    (17) vars -> f_checkTab tipo . idList NEWLINE f_resetTab moreVars
    (21) idList -> . ID
    (22) idList -> . ID COMMA idList

    ID              shift and go to state 38

    idList                         shift and go to state 276

state 260

    (60) statement -> f_checkTab doCycle .

    TAB             reduce using rule 60 (statement -> f_checkTab doCycle .)
    DEF             reduce using rule 60 (statement -> f_checkTab doCycle .)
    $end            reduce using rule 60 (statement -> f_checkTab doCycle .)
    LOOP            reduce using rule 60 (statement -> f_checkTab doCycle .)
    END             reduce using rule 60 (statement -> f_checkTab doCycle .)
    ELSE            reduce using rule 60 (statement -> f_checkTab doCycle .)


state 261

    (41) assign -> f_checkTab ID . f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (77) funct -> ID . f_checkProc LPAREN RPAREN
    (78) funct -> ID . f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN
    (46) f_checkID -> .
    (80) f_checkProc -> .

    EQUAL           reduce using rule 46 (f_checkID -> .)
    LPAREN          reduce using rule 80 (f_checkProc -> .)

    f_checkProc                    shift and go to state 119
    f_checkID                      shift and go to state 277

state 262

    (59) statement -> f_checkTab condition .

    TAB             reduce using rule 59 (statement -> f_checkTab condition .)
    DEF             reduce using rule 59 (statement -> f_checkTab condition .)
    $end            reduce using rule 59 (statement -> f_checkTab condition .)
    LOOP            reduce using rule 59 (statement -> f_checkTab condition .)
    END             reduce using rule 59 (statement -> f_checkTab condition .)
    ELSE            reduce using rule 59 (statement -> f_checkTab condition .)


state 263

    (68) condition -> IF . f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab
    (69) condition -> IF . f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab
    (75) f_isCondition -> .

    NOT             reduce using rule 75 (f_isCondition -> .)
    LPAREN          reduce using rule 75 (f_isCondition -> .)
    ID              reduce using rule 75 (f_isCondition -> .)
    C_BOOL          reduce using rule 75 (f_isCondition -> .)
    C_INT           reduce using rule 75 (f_isCondition -> .)
    C_FLOAT         reduce using rule 75 (f_isCondition -> .)
    C_STRING        reduce using rule 75 (f_isCondition -> .)

    f_isCondition                  shift and go to state 278

state 264

    (48) moreStatements -> TAB . f_addTab moreTabs statement moreStatements
    (54) f_addTab -> .

    TAB             reduce using rule 54 (f_addTab -> .)
    NEWLINE         reduce using rule 54 (f_addTab -> .)
    RETURN          reduce using rule 54 (f_addTab -> .)
    ID              reduce using rule 54 (f_addTab -> .)
    WHILE           reduce using rule 54 (f_addTab -> .)
    IF              reduce using rule 54 (f_addTab -> .)
    DO              reduce using rule 54 (f_addTab -> .)
    BOOL            reduce using rule 54 (f_addTab -> .)
    INT             reduce using rule 54 (f_addTab -> .)
    FLOAT           reduce using rule 54 (f_addTab -> .)
    STRING          reduce using rule 54 (f_addTab -> .)
    IMAGE           reduce using rule 54 (f_addTab -> .)
    DEF             reduce using rule 54 (f_addTab -> .)
    $end            reduce using rule 54 (f_addTab -> .)
    LOOP            reduce using rule 54 (f_addTab -> .)
    END             reduce using rule 54 (f_addTab -> .)
    ELSE            reduce using rule 54 (f_addTab -> .)

    f_addTab                       shift and go to state 279

state 265

    (47) moreStatements -> empty .

    DEF             reduce using rule 47 (moreStatements -> empty .)
    $end            reduce using rule 47 (moreStatements -> empty .)
    LOOP            reduce using rule 47 (moreStatements -> empty .)
    END             reduce using rule 47 (moreStatements -> empty .)
    ELSE            reduce using rule 47 (moreStatements -> empty .)


state 266

    (49) block -> TAB f_addTab moreTabs statement moreStatements .

    DEF             reduce using rule 49 (block -> TAB f_addTab moreTabs statement moreStatements .)
    $end            reduce using rule 49 (block -> TAB f_addTab moreTabs statement moreStatements .)
    END             reduce using rule 49 (block -> TAB f_addTab moreTabs statement moreStatements .)
    LOOP            reduce using rule 49 (block -> TAB f_addTab moreTabs statement moreStatements .)
    ELSE            reduce using rule 49 (block -> TAB f_addTab moreTabs statement moreStatements .)


state 267

    (51) moreTabs -> TAB f_addTab moreTabs .

    TAB             reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    RETURN          reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    ID              reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    WHILE           reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    IF              reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    DO              reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    BOOL            reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    INT             reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    FLOAT           reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    STRING          reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    IMAGE           reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    DEF             reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    $end            reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    LOOP            reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    END             reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)
    ELSE            reduce using rule 51 (moreTabs -> TAB f_addTab moreTabs .)


state 268

    (52) moreTabs -> NEWLINE f_resetTab TAB . f_addTab moreTabs
    (54) f_addTab -> .

    TAB             reduce using rule 54 (f_addTab -> .)
    NEWLINE         reduce using rule 54 (f_addTab -> .)
    RETURN          reduce using rule 54 (f_addTab -> .)
    ID              reduce using rule 54 (f_addTab -> .)
    WHILE           reduce using rule 54 (f_addTab -> .)
    IF              reduce using rule 54 (f_addTab -> .)
    DO              reduce using rule 54 (f_addTab -> .)
    BOOL            reduce using rule 54 (f_addTab -> .)
    INT             reduce using rule 54 (f_addTab -> .)
    FLOAT           reduce using rule 54 (f_addTab -> .)
    STRING          reduce using rule 54 (f_addTab -> .)
    IMAGE           reduce using rule 54 (f_addTab -> .)
    DEF             reduce using rule 54 (f_addTab -> .)
    $end            reduce using rule 54 (f_addTab -> .)
    LOOP            reduce using rule 54 (f_addTab -> .)
    END             reduce using rule 54 (f_addTab -> .)
    ELSE            reduce using rule 54 (f_addTab -> .)

    f_addTab                       shift and go to state 280

state 269

    (29) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (36) f_endModule -> .

    DEF             reduce using rule 36 (f_endModule -> .)
    $end            reduce using rule 36 (f_endModule -> .)

    f_endModule                    shift and go to state 281

state 270

    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (36) f_endModule -> .

    DEF             reduce using rule 36 (f_endModule -> .)
    $end            reduce using rule 36 (f_endModule -> .)

    f_endModule                    shift and go to state 282

state 271

    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block . f_endModule functions
    (36) f_endModule -> .

    DEF             reduce using rule 36 (f_endModule -> .)
    $end            reduce using rule 36 (f_endModule -> .)

    f_endModule                    shift and go to state 283

state 272

    (71) doCycle -> DO f_pushDo . COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression f_endCondition NEWLINE f_resetTab

    COLON           shift and go to state 284


state 273

    (63) statement -> f_checkTab RETURN f_isReturn . expression f_return NEWLINE f_resetTab
    (84) expression -> . orExp moreOrExp
    (85) orExp -> . andExp moreAndExp
    (89) andExp -> . notExp
    (93) notExp -> . boolExp
    (94) notExp -> . NOT f_pushOperator boolExp f_popNotExp
    (96) boolExp -> . exp
    (97) boolExp -> . exp compareToken exp f_popComparation
    (105) exp -> . term moreTerms
    (110) term -> . factor moreFactors
    (115) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (116) factor -> . cvar
    (117) factor -> . funct
    (121) cvar -> . ID f_isID
    (122) cvar -> . C_BOOL f_isConst
    (123) cvar -> . C_INT f_isConst
    (124) cvar -> . C_FLOAT f_isConst
    (125) cvar -> . C_STRING f_isConst
    (77) funct -> . ID f_checkProc LPAREN RPAREN
    (78) funct -> . ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN

    NOT             shift and go to state 94
    LPAREN          shift and go to state 88
    ID              shift and go to state 90
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 89
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 91

    cvar                           shift and go to state 79
    funct                          shift and go to state 82
    factor                         shift and go to state 84
    notExp                         shift and go to state 85
    orExp                          shift and go to state 86
    andExp                         shift and go to state 80
    term                           shift and go to state 87
    boolExp                        shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 285

state 274

    (62) statement -> f_checkTab funct NEWLINE . f_resetTab
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)
    DEF             reduce using rule 55 (f_resetTab -> .)
    $end            reduce using rule 55 (f_resetTab -> .)
    LOOP            reduce using rule 55 (f_resetTab -> .)
    END             reduce using rule 55 (f_resetTab -> .)
    ELSE            reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 286

state 275

    (67) cycle -> f_checkTab WHILE f_isCondition . expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab
    (84) expression -> . orExp moreOrExp
    (85) orExp -> . andExp moreAndExp
    (89) andExp -> . notExp
    (93) notExp -> . boolExp
    (94) notExp -> . NOT f_pushOperator boolExp f_popNotExp
    (96) boolExp -> . exp
    (97) boolExp -> . exp compareToken exp f_popComparation
    (105) exp -> . term moreTerms
    (110) term -> . factor moreFactors
    (115) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (116) factor -> . cvar
    (117) factor -> . funct
    (121) cvar -> . ID f_isID
    (122) cvar -> . C_BOOL f_isConst
    (123) cvar -> . C_INT f_isConst
    (124) cvar -> . C_FLOAT f_isConst
    (125) cvar -> . C_STRING f_isConst
    (77) funct -> . ID f_checkProc LPAREN RPAREN
    (78) funct -> . ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN

    NOT             shift and go to state 94
    LPAREN          shift and go to state 88
    ID              shift and go to state 90
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 89
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 91

    cvar                           shift and go to state 79
    funct                          shift and go to state 82
    factor                         shift and go to state 84
    notExp                         shift and go to state 85
    orExp                          shift and go to state 86
    andExp                         shift and go to state 80
    term                           shift and go to state 87
    boolExp                        shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 287

state 276

    (17) vars -> f_checkTab tipo idList . NEWLINE f_resetTab moreVars

    NEWLINE         shift and go to state 288


state 277

    (41) assign -> f_checkTab ID f_checkID . EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign

    EQUAL           shift and go to state 289


state 278

    (68) condition -> IF f_isCondition . expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab
    (69) condition -> IF f_isCondition . expression COLON f_endCondition NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab
    (84) expression -> . orExp moreOrExp
    (85) orExp -> . andExp moreAndExp
    (89) andExp -> . notExp
    (93) notExp -> . boolExp
    (94) notExp -> . NOT f_pushOperator boolExp f_popNotExp
    (96) boolExp -> . exp
    (97) boolExp -> . exp compareToken exp f_popComparation
    (105) exp -> . term moreTerms
    (110) term -> . factor moreFactors
    (115) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (116) factor -> . cvar
    (117) factor -> . funct
    (121) cvar -> . ID f_isID
    (122) cvar -> . C_BOOL f_isConst
    (123) cvar -> . C_INT f_isConst
    (124) cvar -> . C_FLOAT f_isConst
    (125) cvar -> . C_STRING f_isConst
    (77) funct -> . ID f_checkProc LPAREN RPAREN
    (78) funct -> . ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN

    NOT             shift and go to state 94
    LPAREN          shift and go to state 88
    ID              shift and go to state 90
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 89
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 91

    cvar                           shift and go to state 79
    funct                          shift and go to state 82
    factor                         shift and go to state 84
    notExp                         shift and go to state 85
    orExp                          shift and go to state 86
    andExp                         shift and go to state 80
    term                           shift and go to state 87
    boolExp                        shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 290

state 279

    (48) moreStatements -> TAB f_addTab . moreTabs statement moreStatements
    (50) moreTabs -> . empty
    (51) moreTabs -> . TAB f_addTab moreTabs
    (52) moreTabs -> . NEWLINE f_resetTab TAB f_addTab moreTabs
    (4) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 233
    NEWLINE         shift and go to state 234
    RETURN          reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    WHILE           reduce using rule 4 (empty -> .)
    IF              reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    BOOL            reduce using rule 4 (empty -> .)
    INT             reduce using rule 4 (empty -> .)
    FLOAT           reduce using rule 4 (empty -> .)
    STRING          reduce using rule 4 (empty -> .)
    IMAGE           reduce using rule 4 (empty -> .)
    DEF             reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    LOOP            reduce using rule 4 (empty -> .)
    END             reduce using rule 4 (empty -> .)
    ELSE            reduce using rule 4 (empty -> .)

  ! TAB             [ reduce using rule 4 (empty -> .) ]

    moreTabs                       shift and go to state 291
    empty                          shift and go to state 235

state 280

    (52) moreTabs -> NEWLINE f_resetTab TAB f_addTab . moreTabs
    (50) moreTabs -> . empty
    (51) moreTabs -> . TAB f_addTab moreTabs
    (52) moreTabs -> . NEWLINE f_resetTab TAB f_addTab moreTabs
    (4) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 233
    NEWLINE         shift and go to state 234
    RETURN          reduce using rule 4 (empty -> .)
    ID              reduce using rule 4 (empty -> .)
    WHILE           reduce using rule 4 (empty -> .)
    IF              reduce using rule 4 (empty -> .)
    DO              reduce using rule 4 (empty -> .)
    BOOL            reduce using rule 4 (empty -> .)
    INT             reduce using rule 4 (empty -> .)
    FLOAT           reduce using rule 4 (empty -> .)
    STRING          reduce using rule 4 (empty -> .)
    IMAGE           reduce using rule 4 (empty -> .)
    DEF             reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    LOOP            reduce using rule 4 (empty -> .)
    END             reduce using rule 4 (empty -> .)
    ELSE            reduce using rule 4 (empty -> .)

  ! TAB             [ reduce using rule 4 (empty -> .) ]

    empty                          shift and go to state 235
    moreTabs                       shift and go to state 292

state 281

    (29) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (34) functions -> . empty
    (4) empty -> .

    DEF             shift and go to state 44
    $end            reduce using rule 4 (empty -> .)

    functions                      shift and go to state 293
    empty                          shift and go to state 46

state 282

    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (34) functions -> . empty
    (4) empty -> .

    DEF             shift and go to state 44
    $end            reduce using rule 4 (empty -> .)

    functions                      shift and go to state 294
    empty                          shift and go to state 46

state 283

    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule . functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (29) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (30) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (31) functions -> . DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (32) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (33) functions -> . DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions
    (34) functions -> . empty
    (4) empty -> .

    DEF             shift and go to state 44
    $end            reduce using rule 4 (empty -> .)

    functions                      shift and go to state 295
    empty                          shift and go to state 46

state 284

    (71) doCycle -> DO f_pushDo COLON . NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression f_endCondition NEWLINE f_resetTab

    NEWLINE         shift and go to state 296


state 285

    (63) statement -> f_checkTab RETURN f_isReturn expression . f_return NEWLINE f_resetTab
    (66) f_return -> .

    NEWLINE         reduce using rule 66 (f_return -> .)

    f_return                       shift and go to state 297

state 286

    (62) statement -> f_checkTab funct NEWLINE f_resetTab .

    TAB             reduce using rule 62 (statement -> f_checkTab funct NEWLINE f_resetTab .)
    DEF             reduce using rule 62 (statement -> f_checkTab funct NEWLINE f_resetTab .)
    $end            reduce using rule 62 (statement -> f_checkTab funct NEWLINE f_resetTab .)
    LOOP            reduce using rule 62 (statement -> f_checkTab funct NEWLINE f_resetTab .)
    END             reduce using rule 62 (statement -> f_checkTab funct NEWLINE f_resetTab .)
    ELSE            reduce using rule 62 (statement -> f_checkTab funct NEWLINE f_resetTab .)


state 287

    (67) cycle -> f_checkTab WHILE f_isCondition expression . COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab

    COLON           shift and go to state 298


state 288

    (17) vars -> f_checkTab tipo idList NEWLINE . f_resetTab moreVars
    (55) f_resetTab -> .

    BOOL            reduce using rule 55 (f_resetTab -> .)
    INT             reduce using rule 55 (f_resetTab -> .)
    FLOAT           reduce using rule 55 (f_resetTab -> .)
    STRING          reduce using rule 55 (f_resetTab -> .)
    IMAGE           reduce using rule 55 (f_resetTab -> .)
    TAB             reduce using rule 55 (f_resetTab -> .)
    DEF             reduce using rule 55 (f_resetTab -> .)
    $end            reduce using rule 55 (f_resetTab -> .)
    LOOP            reduce using rule 55 (f_resetTab -> .)
    END             reduce using rule 55 (f_resetTab -> .)
    ELSE            reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 299

state 289

    (41) assign -> f_checkTab ID f_checkID EQUAL . f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (44) f_isAssign -> .

    NOT             reduce using rule 44 (f_isAssign -> .)
    LPAREN          reduce using rule 44 (f_isAssign -> .)
    ID              reduce using rule 44 (f_isAssign -> .)
    C_BOOL          reduce using rule 44 (f_isAssign -> .)
    C_INT           reduce using rule 44 (f_isAssign -> .)
    C_FLOAT         reduce using rule 44 (f_isAssign -> .)
    C_STRING        reduce using rule 44 (f_isAssign -> .)

    f_isAssign                     shift and go to state 300

state 290

    (68) condition -> IF f_isCondition expression . COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab
    (69) condition -> IF f_isCondition expression . COLON f_endCondition NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab

    COLON           shift and go to state 301


state 291

    (48) moreStatements -> TAB f_addTab moreTabs . statement moreStatements
    (57) statement -> . vars
    (58) statement -> . assign
    (59) statement -> . f_checkTab condition
    (60) statement -> . f_checkTab doCycle
    (61) statement -> . cycle
    (62) statement -> . f_checkTab funct NEWLINE f_resetTab
    (63) statement -> . f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab
    (64) statement -> . empty
    (17) vars -> . f_checkTab tipo idList NEWLINE f_resetTab moreVars
    (41) assign -> . f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (56) f_checkTab -> .
    (67) cycle -> . f_checkTab WHILE f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab
    (4) empty -> .

    RETURN          reduce using rule 56 (f_checkTab -> .)
    ID              reduce using rule 56 (f_checkTab -> .)
    WHILE           reduce using rule 56 (f_checkTab -> .)
    IF              reduce using rule 56 (f_checkTab -> .)
    DO              reduce using rule 56 (f_checkTab -> .)
    BOOL            reduce using rule 56 (f_checkTab -> .)
    INT             reduce using rule 56 (f_checkTab -> .)
    FLOAT           reduce using rule 56 (f_checkTab -> .)
    STRING          reduce using rule 56 (f_checkTab -> .)
    IMAGE           reduce using rule 56 (f_checkTab -> .)
    TAB             reduce using rule 4 (empty -> .)
    DEF             reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    LOOP            reduce using rule 4 (empty -> .)
    END             reduce using rule 4 (empty -> .)
    ELSE            reduce using rule 4 (empty -> .)

    vars                           shift and go to state 243
    f_checkTab                     shift and go to state 244
    statement                      shift and go to state 302
    empty                          shift and go to state 245
    cycle                          shift and go to state 247
    assign                         shift and go to state 248

state 292

    (52) moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .

    TAB             reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    RETURN          reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    ID              reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    WHILE           reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    IF              reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    DO              reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    BOOL            reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    INT             reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    FLOAT           reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    STRING          reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    IMAGE           reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    DEF             reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    $end            reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    LOOP            reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    END             reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)
    ELSE            reduce using rule 52 (moreTabs -> NEWLINE f_resetTab TAB f_addTab moreTabs .)


state 293

    (29) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 29 (functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 294

    (33) functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 33 (functions -> DEF VOID f_setVoid MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 295

    (31) functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .

    $end            reduce using rule 31 (functions -> DEF VOID f_setVoid ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE f_resetTab f_incTab block f_endModule functions .)


state 296

    (71) doCycle -> DO f_pushDo COLON NEWLINE . f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression f_endCondition NEWLINE f_resetTab
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 303

state 297

    (63) statement -> f_checkTab RETURN f_isReturn expression f_return . NEWLINE f_resetTab

    NEWLINE         shift and go to state 304


state 298

    (67) cycle -> f_checkTab WHILE f_isCondition expression COLON . f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab
    (76) f_endCondition -> .

    NEWLINE         reduce using rule 76 (f_endCondition -> .)

    f_endCondition                 shift and go to state 305

state 299

    (17) vars -> f_checkTab tipo idList NEWLINE f_resetTab . moreVars
    (18) moreVars -> . f_checkTab tipo idList NEWLINE f_resetTab moreVars
    (19) moreVars -> . empty
    (56) f_checkTab -> .
    (4) empty -> .

    BOOL            reduce using rule 56 (f_checkTab -> .)
    INT             reduce using rule 56 (f_checkTab -> .)
    FLOAT           reduce using rule 56 (f_checkTab -> .)
    STRING          reduce using rule 56 (f_checkTab -> .)
    IMAGE           reduce using rule 56 (f_checkTab -> .)
    TAB             reduce using rule 4 (empty -> .)
    DEF             reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    LOOP            reduce using rule 4 (empty -> .)
    END             reduce using rule 4 (empty -> .)
    ELSE            reduce using rule 4 (empty -> .)

    f_checkTab                     shift and go to state 13
    moreVars                       shift and go to state 306
    empty                          shift and go to state 15

state 300

    (41) assign -> f_checkTab ID f_checkID EQUAL f_isAssign . expression NEWLINE f_resetTab f_generateEqual moreAssign
    (84) expression -> . orExp moreOrExp
    (85) orExp -> . andExp moreAndExp
    (89) andExp -> . notExp
    (93) notExp -> . boolExp
    (94) notExp -> . NOT f_pushOperator boolExp f_popNotExp
    (96) boolExp -> . exp
    (97) boolExp -> . exp compareToken exp f_popComparation
    (105) exp -> . term moreTerms
    (110) term -> . factor moreFactors
    (115) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (116) factor -> . cvar
    (117) factor -> . funct
    (121) cvar -> . ID f_isID
    (122) cvar -> . C_BOOL f_isConst
    (123) cvar -> . C_INT f_isConst
    (124) cvar -> . C_FLOAT f_isConst
    (125) cvar -> . C_STRING f_isConst
    (77) funct -> . ID f_checkProc LPAREN RPAREN
    (78) funct -> . ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN

    NOT             shift and go to state 94
    LPAREN          shift and go to state 88
    ID              shift and go to state 90
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 89
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 91

    cvar                           shift and go to state 79
    funct                          shift and go to state 82
    factor                         shift and go to state 84
    notExp                         shift and go to state 85
    orExp                          shift and go to state 86
    andExp                         shift and go to state 80
    term                           shift and go to state 87
    boolExp                        shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 307

state 301

    (68) condition -> IF f_isCondition expression COLON . f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab
    (69) condition -> IF f_isCondition expression COLON . f_endCondition NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab
    (76) f_endCondition -> .

    NEWLINE         reduce using rule 76 (f_endCondition -> .)

    f_endCondition                 shift and go to state 308

state 302

    (48) moreStatements -> TAB f_addTab moreTabs statement . moreStatements
    (47) moreStatements -> . empty
    (48) moreStatements -> . TAB f_addTab moreTabs statement moreStatements
    (4) empty -> .

    TAB             shift and go to state 264
    DEF             reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    LOOP            reduce using rule 4 (empty -> .)
    END             reduce using rule 4 (empty -> .)
    ELSE            reduce using rule 4 (empty -> .)

    empty                          shift and go to state 265
    moreStatements                 shift and go to state 309

state 303

    (71) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab . f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression f_endCondition NEWLINE f_resetTab
    (53) f_incTab -> .

    TAB             reduce using rule 53 (f_incTab -> .)

    f_incTab                       shift and go to state 310

state 304

    (63) statement -> f_checkTab RETURN f_isReturn expression f_return NEWLINE . f_resetTab
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)
    DEF             reduce using rule 55 (f_resetTab -> .)
    $end            reduce using rule 55 (f_resetTab -> .)
    LOOP            reduce using rule 55 (f_resetTab -> .)
    END             reduce using rule 55 (f_resetTab -> .)
    ELSE            reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 311

state 305

    (67) cycle -> f_checkTab WHILE f_isCondition expression COLON f_endCondition . NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab

    NEWLINE         shift and go to state 312


state 306

    (17) vars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .

    TAB             reduce using rule 17 (vars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    DEF             reduce using rule 17 (vars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    $end            reduce using rule 17 (vars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    LOOP            reduce using rule 17 (vars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    END             reduce using rule 17 (vars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)
    ELSE            reduce using rule 17 (vars -> f_checkTab tipo idList NEWLINE f_resetTab moreVars .)


state 307

    (41) assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression . NEWLINE f_resetTab f_generateEqual moreAssign

    NEWLINE         shift and go to state 313


state 308

    (68) condition -> IF f_isCondition expression COLON f_endCondition . NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab
    (69) condition -> IF f_isCondition expression COLON f_endCondition . NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab

    NEWLINE         shift and go to state 314


state 309

    (48) moreStatements -> TAB f_addTab moreTabs statement moreStatements .

    DEF             reduce using rule 48 (moreStatements -> TAB f_addTab moreTabs statement moreStatements .)
    $end            reduce using rule 48 (moreStatements -> TAB f_addTab moreTabs statement moreStatements .)
    LOOP            reduce using rule 48 (moreStatements -> TAB f_addTab moreTabs statement moreStatements .)
    END             reduce using rule 48 (moreStatements -> TAB f_addTab moreTabs statement moreStatements .)
    ELSE            reduce using rule 48 (moreStatements -> TAB f_addTab moreTabs statement moreStatements .)


state 310

    (71) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab . block f_checkTab LOOP f_isDoWhile f_isCondition expression f_endCondition NEWLINE f_resetTab
    (49) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 211

    block                          shift and go to state 315

state 311

    (63) statement -> f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab .

    TAB             reduce using rule 63 (statement -> f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab .)
    DEF             reduce using rule 63 (statement -> f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab .)
    $end            reduce using rule 63 (statement -> f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab .)
    LOOP            reduce using rule 63 (statement -> f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab .)
    END             reduce using rule 63 (statement -> f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab .)
    ELSE            reduce using rule 63 (statement -> f_checkTab RETURN f_isReturn expression f_return NEWLINE f_resetTab .)


state 312

    (67) cycle -> f_checkTab WHILE f_isCondition expression COLON f_endCondition NEWLINE . f_resetTab f_incTab block END NEWLINE f_resetTab
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 316

state 313

    (41) assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE . f_resetTab f_generateEqual moreAssign
    (55) f_resetTab -> .

    ID              reduce using rule 55 (f_resetTab -> .)
    TAB             reduce using rule 55 (f_resetTab -> .)
    DEF             reduce using rule 55 (f_resetTab -> .)
    $end            reduce using rule 55 (f_resetTab -> .)
    LOOP            reduce using rule 55 (f_resetTab -> .)
    END             reduce using rule 55 (f_resetTab -> .)
    ELSE            reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 317

state 314

    (68) condition -> IF f_isCondition expression COLON f_endCondition NEWLINE . f_resetTab f_incTab block END NEWLINE f_resetTab
    (69) condition -> IF f_isCondition expression COLON f_endCondition NEWLINE . f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 318

state 315

    (71) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block . f_checkTab LOOP f_isDoWhile f_isCondition expression f_endCondition NEWLINE f_resetTab
    (56) f_checkTab -> .

    LOOP            reduce using rule 56 (f_checkTab -> .)

    f_checkTab                     shift and go to state 319

state 316

    (67) cycle -> f_checkTab WHILE f_isCondition expression COLON f_endCondition NEWLINE f_resetTab . f_incTab block END NEWLINE f_resetTab
    (53) f_incTab -> .

    TAB             reduce using rule 53 (f_incTab -> .)

    f_incTab                       shift and go to state 320

state 317

    (41) assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab . f_generateEqual moreAssign
    (45) f_generateEqual -> .

    ID              reduce using rule 45 (f_generateEqual -> .)
    TAB             reduce using rule 45 (f_generateEqual -> .)
    DEF             reduce using rule 45 (f_generateEqual -> .)
    $end            reduce using rule 45 (f_generateEqual -> .)
    LOOP            reduce using rule 45 (f_generateEqual -> .)
    END             reduce using rule 45 (f_generateEqual -> .)
    ELSE            reduce using rule 45 (f_generateEqual -> .)

    f_generateEqual                shift and go to state 321

state 318

    (68) condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab . f_incTab block END NEWLINE f_resetTab
    (69) condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab . f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab
    (53) f_incTab -> .

    TAB             reduce using rule 53 (f_incTab -> .)

    f_incTab                       shift and go to state 322

state 319

    (71) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab . LOOP f_isDoWhile f_isCondition expression f_endCondition NEWLINE f_resetTab

    LOOP            shift and go to state 323


state 320

    (67) cycle -> f_checkTab WHILE f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab . block END NEWLINE f_resetTab
    (49) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 211

    block                          shift and go to state 324

state 321

    (41) assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual . moreAssign
    (42) moreAssign -> . empty
    (43) moreAssign -> . f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign
    (4) empty -> .
    (56) f_checkTab -> .

    TAB             reduce using rule 4 (empty -> .)
    DEF             reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    LOOP            reduce using rule 4 (empty -> .)
    END             reduce using rule 4 (empty -> .)
    ELSE            reduce using rule 4 (empty -> .)
    ID              reduce using rule 56 (f_checkTab -> .)

    f_checkTab                     shift and go to state 27
    moreAssign                     shift and go to state 325
    empty                          shift and go to state 29

state 322

    (68) condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab . block END NEWLINE f_resetTab
    (69) condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab . block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab
    (49) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 211

    block                          shift and go to state 326

state 323

    (71) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP . f_isDoWhile f_isCondition expression f_endCondition NEWLINE f_resetTab
    (74) f_isDoWhile -> .

    NOT             reduce using rule 74 (f_isDoWhile -> .)
    LPAREN          reduce using rule 74 (f_isDoWhile -> .)
    ID              reduce using rule 74 (f_isDoWhile -> .)
    C_BOOL          reduce using rule 74 (f_isDoWhile -> .)
    C_INT           reduce using rule 74 (f_isDoWhile -> .)
    C_FLOAT         reduce using rule 74 (f_isDoWhile -> .)
    C_STRING        reduce using rule 74 (f_isDoWhile -> .)

    f_isDoWhile                    shift and go to state 327

state 324

    (67) cycle -> f_checkTab WHILE f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block . END NEWLINE f_resetTab

    END             shift and go to state 328


state 325

    (41) assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .

    TAB             reduce using rule 41 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    DEF             reduce using rule 41 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    $end            reduce using rule 41 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    LOOP            reduce using rule 41 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    END             reduce using rule 41 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)
    ELSE            reduce using rule 41 (assign -> f_checkTab ID f_checkID EQUAL f_isAssign expression NEWLINE f_resetTab f_generateEqual moreAssign .)


state 326

    (68) condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block . END NEWLINE f_resetTab
    (69) condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block . f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab
    (56) f_checkTab -> .

    END             shift and go to state 329
    ELSE            reduce using rule 56 (f_checkTab -> .)

    f_checkTab                     shift and go to state 330

state 327

    (71) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile . f_isCondition expression f_endCondition NEWLINE f_resetTab
    (75) f_isCondition -> .

    NOT             reduce using rule 75 (f_isCondition -> .)
    LPAREN          reduce using rule 75 (f_isCondition -> .)
    ID              reduce using rule 75 (f_isCondition -> .)
    C_BOOL          reduce using rule 75 (f_isCondition -> .)
    C_INT           reduce using rule 75 (f_isCondition -> .)
    C_FLOAT         reduce using rule 75 (f_isCondition -> .)
    C_STRING        reduce using rule 75 (f_isCondition -> .)

    f_isCondition                  shift and go to state 331

state 328

    (67) cycle -> f_checkTab WHILE f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END . NEWLINE f_resetTab

    NEWLINE         shift and go to state 332


state 329

    (68) condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END . NEWLINE f_resetTab

    NEWLINE         shift and go to state 333


state 330

    (69) condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block f_checkTab . ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab

    ELSE            shift and go to state 334


state 331

    (71) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition . expression f_endCondition NEWLINE f_resetTab
    (84) expression -> . orExp moreOrExp
    (85) orExp -> . andExp moreAndExp
    (89) andExp -> . notExp
    (93) notExp -> . boolExp
    (94) notExp -> . NOT f_pushOperator boolExp f_popNotExp
    (96) boolExp -> . exp
    (97) boolExp -> . exp compareToken exp f_popComparation
    (105) exp -> . term moreTerms
    (110) term -> . factor moreFactors
    (115) factor -> . LPAREN f_pushOperator expression RPAREN f_popOperator
    (116) factor -> . cvar
    (117) factor -> . funct
    (121) cvar -> . ID f_isID
    (122) cvar -> . C_BOOL f_isConst
    (123) cvar -> . C_INT f_isConst
    (124) cvar -> . C_FLOAT f_isConst
    (125) cvar -> . C_STRING f_isConst
    (77) funct -> . ID f_checkProc LPAREN RPAREN
    (78) funct -> . ID f_checkProc LPAREN f_functCall expression f_genParam f_functCall expressionList RPAREN

    NOT             shift and go to state 94
    LPAREN          shift and go to state 88
    ID              shift and go to state 90
    C_BOOL          shift and go to state 83
    C_INT           shift and go to state 89
    C_FLOAT         shift and go to state 81
    C_STRING        shift and go to state 91

    funct                          shift and go to state 82
    cvar                           shift and go to state 79
    andExp                         shift and go to state 80
    factor                         shift and go to state 84
    notExp                         shift and go to state 85
    orExp                          shift and go to state 86
    term                           shift and go to state 87
    boolExp                        shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 335

state 332

    (67) cycle -> f_checkTab WHILE f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE . f_resetTab
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)
    DEF             reduce using rule 55 (f_resetTab -> .)
    $end            reduce using rule 55 (f_resetTab -> .)
    LOOP            reduce using rule 55 (f_resetTab -> .)
    END             reduce using rule 55 (f_resetTab -> .)
    ELSE            reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 336

state 333

    (68) condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE . f_resetTab
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)
    DEF             reduce using rule 55 (f_resetTab -> .)
    $end            reduce using rule 55 (f_resetTab -> .)
    LOOP            reduce using rule 55 (f_resetTab -> .)
    END             reduce using rule 55 (f_resetTab -> .)
    ELSE            reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 337

state 334

    (69) condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block f_checkTab ELSE . f_popIf COLON NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab
    (72) f_popIf -> .

    COLON           reduce using rule 72 (f_popIf -> .)

    f_popIf                        shift and go to state 338

state 335

    (71) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression . f_endCondition NEWLINE f_resetTab
    (76) f_endCondition -> .

    NEWLINE         reduce using rule 76 (f_endCondition -> .)

    f_endCondition                 shift and go to state 339

state 336

    (67) cycle -> f_checkTab WHILE f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab .

    TAB             reduce using rule 67 (cycle -> f_checkTab WHILE f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab .)
    DEF             reduce using rule 67 (cycle -> f_checkTab WHILE f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab .)
    $end            reduce using rule 67 (cycle -> f_checkTab WHILE f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab .)
    LOOP            reduce using rule 67 (cycle -> f_checkTab WHILE f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab .)
    END             reduce using rule 67 (cycle -> f_checkTab WHILE f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab .)
    ELSE            reduce using rule 67 (cycle -> f_checkTab WHILE f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab .)


state 337

    (68) condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab .

    TAB             reduce using rule 68 (condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab .)
    DEF             reduce using rule 68 (condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab .)
    $end            reduce using rule 68 (condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab .)
    LOOP            reduce using rule 68 (condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab .)
    END             reduce using rule 68 (condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab .)
    ELSE            reduce using rule 68 (condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab .)


state 338

    (69) condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf . COLON NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab

    COLON           shift and go to state 340


state 339

    (71) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression f_endCondition . NEWLINE f_resetTab

    NEWLINE         shift and go to state 341


state 340

    (69) condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON . NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab

    NEWLINE         shift and go to state 342


state 341

    (71) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression f_endCondition NEWLINE . f_resetTab
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)
    DEF             reduce using rule 55 (f_resetTab -> .)
    $end            reduce using rule 55 (f_resetTab -> .)
    LOOP            reduce using rule 55 (f_resetTab -> .)
    END             reduce using rule 55 (f_resetTab -> .)
    ELSE            reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 343

state 342

    (69) condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE . f_resetTab f_incTab block END NEWLINE f_resetTab
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 344

state 343

    (71) doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression f_endCondition NEWLINE f_resetTab .

    TAB             reduce using rule 71 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression f_endCondition NEWLINE f_resetTab .)
    DEF             reduce using rule 71 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression f_endCondition NEWLINE f_resetTab .)
    $end            reduce using rule 71 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression f_endCondition NEWLINE f_resetTab .)
    LOOP            reduce using rule 71 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression f_endCondition NEWLINE f_resetTab .)
    END             reduce using rule 71 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression f_endCondition NEWLINE f_resetTab .)
    ELSE            reduce using rule 71 (doCycle -> DO f_pushDo COLON NEWLINE f_resetTab f_incTab block f_checkTab LOOP f_isDoWhile f_isCondition expression f_endCondition NEWLINE f_resetTab .)


state 344

    (69) condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab . f_incTab block END NEWLINE f_resetTab
    (53) f_incTab -> .

    TAB             reduce using rule 53 (f_incTab -> .)

    f_incTab                       shift and go to state 345

state 345

    (69) condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab . block END NEWLINE f_resetTab
    (49) block -> . TAB f_addTab moreTabs statement moreStatements

    TAB             shift and go to state 211

    block                          shift and go to state 346

state 346

    (69) condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block . END NEWLINE f_resetTab

    END             shift and go to state 347


state 347

    (69) condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block END . NEWLINE f_resetTab

    NEWLINE         shift and go to state 348


state 348

    (69) condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block END NEWLINE . f_resetTab
    (55) f_resetTab -> .

    TAB             reduce using rule 55 (f_resetTab -> .)
    DEF             reduce using rule 55 (f_resetTab -> .)
    $end            reduce using rule 55 (f_resetTab -> .)
    LOOP            reduce using rule 55 (f_resetTab -> .)
    END             reduce using rule 55 (f_resetTab -> .)
    ELSE            reduce using rule 55 (f_resetTab -> .)

    f_resetTab                     shift and go to state 349

state 349

    (69) condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab .

    TAB             reduce using rule 69 (condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab .)
    DEF             reduce using rule 69 (condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab .)
    $end            reduce using rule 69 (condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab .)
    LOOP            reduce using rule 69 (condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab .)
    END             reduce using rule 69 (condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab .)
    ELSE            reduce using rule 69 (condition -> IF f_isCondition expression COLON f_endCondition NEWLINE f_resetTab f_incTab block f_checkTab ELSE f_popIf COLON NEWLINE f_resetTab f_incTab block END NEWLINE f_resetTab .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for TAB in state 222 resolved as shift
WARNING: shift/reduce conflict for TAB in state 249 resolved as shift
WARNING: shift/reduce conflict for TAB in state 279 resolved as shift
WARNING: shift/reduce conflict for TAB in state 280 resolved as shift
